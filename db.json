{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/about/index.md.bak","path":"about/index.md.bak","modified":1,"renderable":0},{"_id":"source/categories/index.md.bak","path":"categories/index.md.bak","modified":1,"renderable":0},{"_id":"source/images/IOWAIT/IOTOP.png","path":"images/IOWAIT/IOTOP.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/100.jpg","path":"images/100.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/1001.jpg","path":"images/1001.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"source/images/IOWAIT/cpuUseage.png","path":"images/IOWAIT/cpuUseage.png","modified":1,"renderable":0},{"_id":"source/images/IOWAIT/loadAverage.png","path":"images/IOWAIT/loadAverage.png","modified":1,"renderable":0},{"_id":"source/images/IOWAIT/loadAverage0223.png","path":"images/IOWAIT/loadAverage0223.png","modified":1,"renderable":0},{"_id":"source/images/multithread/变量在内存中的工作过程.png","path":"images/multithread/变量在内存中的工作过程.png","modified":1,"renderable":0},{"_id":"source/images/multithread/线程状态切换.jpg","path":"images/multithread/线程状态切换.jpg","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/favicon1.ico","path":"favicon1.ico","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"9b62a46bff74511e3da89d8063fab47da61e70dd","modified":1487921668444},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1487921668877},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1487921668888},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1487921668879},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1487921668891},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1487921668893},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1487921668895},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1487921668898},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1487921668901},{"_id":"themes/next/_config.yml","hash":"e57cde3b1b9e65aa778a5b537b07fccf56c5320e","modified":1487921668905},{"_id":"themes/next/_config.yml.bak","hash":"65a932b4792f658b88aa9f62a754c871c49190f4","modified":1487921668908},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1487921668911},{"_id":"themes/next/gulpfile.coffee","hash":"e549561461642051d195550ec49d793e44ee22a0","modified":1487921668913},{"_id":"themes/next/package.json","hash":"48e2352f8e41f2b6bbf55254d10f3192ee206d5a","modified":1487921670033},{"_id":"source/_posts/CentOS搭建SVN服务器.md","hash":"547294fa81feff2fadaf86eff5940c26364691bd","modified":1487921668446},{"_id":"source/_posts/DesignPatterns.md","hash":"201e3dfc8667efa3950a1ac7ca6846be7a1d2181","modified":1487921668449},{"_id":"source/_posts/IOWAIT导致系统负载过高故障排除.md","hash":"d5c6aa8c6ec2159df1690ef9f20a5273eee1355b","modified":1487921806065},{"_id":"source/_posts/Zookeeper+ActiveMQ+Paho搭建高可用消息推送.md","hash":"dbe00d90b34047f0e14af4da7f63584c5bc7d996","modified":1487921668455},{"_id":"source/_posts/multiThread.md","hash":"0e5c8c0b47fc1f069e545361173561ccbc356f0b","modified":1487921668458},{"_id":"source/_posts/书单--2016.md","hash":"7fa25b68f8e3bef946c5c8d60666746280e16371","modified":1487921668461},{"_id":"source/_posts/书单--2017.md","hash":"1408047bf9a677b46d8658b17acce85b2e362f4c","modified":1487921668466},{"_id":"source/about/index.md","hash":"20bba7b19e5b309ac230b6f9a768a2f6c361bddf","modified":1487922077948},{"_id":"source/about/index.md.bak","hash":"aa7a5c5ca419be2a0e17d9ee8720d092825e60ab","modified":1487921668471},{"_id":"source/categories/index.md","hash":"6a52fdb562db13992cd7245a3a84c553dcb83d6a","modified":1487921668473},{"_id":"source/categories/index.md.bak","hash":"f04220c5aa84b66bddd6f636681179788b15acab","modified":1487921668476},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1487921668883},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1487921668885},{"_id":"themes/next/languages/de.yml","hash":"db6a9d669f4b6282cda6c0a2d4e03d3e308a4846","modified":1487921668916},{"_id":"themes/next/languages/default.yml","hash":"fe00529a94bb2550194a31d178f5810b45014ab6","modified":1487921668919},{"_id":"themes/next/languages/en.yml","hash":"d02acdce503c86fbb01920ad22d31ec56fc285f1","modified":1487921668922},{"_id":"themes/next/languages/fr-FR.yml","hash":"91cf55b9d75879e72c8008d2659fe2ea993a4cca","modified":1487921668924},{"_id":"themes/next/languages/ja.yml","hash":"bc89436a2a015ef72f43f265e56e37d94e73c0cd","modified":1487921668930},{"_id":"themes/next/languages/id.yml","hash":"d8b9dc017da0be7f71fda1cacd8064cbc38963b9","modified":1487921668927},{"_id":"themes/next/languages/ko.yml","hash":"c59676f2af80c3c594c34c4a0fcbf65fd8864ff3","modified":1487921668932},{"_id":"themes/next/languages/pt-BR.yml","hash":"4b91f96b07e05705b28964df7460466c9b522e2c","modified":1487921668935},{"_id":"themes/next/languages/pt.yml","hash":"f364905121a816c9797acce07c0a4f248965b29a","modified":1487921668937},{"_id":"themes/next/languages/ru.yml","hash":"402e676252ab1fc4522257a578738cb9536eb077","modified":1487921668940},{"_id":"themes/next/languages/zh-Hans.yml","hash":"439c16c744b1596f24d9e0b4e230c4d3c93b7d85","modified":1487921668943},{"_id":"themes/next/languages/zh-hk.yml","hash":"a59f3f3114f5eb4d170a76da4359307e8f5159a7","modified":1487921668945},{"_id":"themes/next/languages/zh-tw.yml","hash":"18da1324d2212faca9a6e5e6ce98b419c86d4b0c","modified":1487921668948},{"_id":"themes/next/layout/_layout.swig","hash":"b4ef30f7da073bf2a9052186f76e0e080de1c794","modified":1487921669746},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1487921670017},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1487921670020},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1487921670022},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1487921670025},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1487921670026},{"_id":"themes/next/layout/schedule.swig","hash":"595013860078799d455af4965b3a7c5c4fd3923c","modified":1487921670028},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1487921670030},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1487921670038},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1487921671130},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1487921671137},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1487921671150},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487921670580},{"_id":"source/images/IOWAIT/IOTOP.png","hash":"775056a51f8902229441d11abe14c6b4e198ca99","modified":1487921668487},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1487921669701},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1487921669702},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1487921669757},{"_id":"themes/next/layout/_macro/post.swig","hash":"abfc88f34f2c0ae52229c4ffa577b00ad7cecdc6","modified":1487921669778},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1487921669787},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"3b261c758a7673d91c116367be1bb5223403f9e0","modified":1487921669794},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1487921669800},{"_id":"themes/next/layout/_partials/comments.swig","hash":"a5ffadb516522f85c052b290b94c0e4af3002644","modified":1487921669805},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1487921669808},{"_id":"themes/next/layout/_partials/footer.swig","hash":"168430bd87ca8212cf9773b5dd94f52b805ef210","modified":1487921669813},{"_id":"themes/next/layout/_partials/head.swig","hash":"740684ef2b6e56183529387882042612e904bc8d","modified":1487921669822},{"_id":"themes/next/layout/_partials/header.swig","hash":"d9b10a92fdccd57a0c0d6773831f9c1b0f1bb449","modified":1487921669833},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"dfbb6e9692333166aa78231ad12b2a40c153cbcb","modified":1487921669836},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1487921669838},{"_id":"themes/next/layout/_partials/search.swig","hash":"952b7b8d9ce2c81d4002a9dc2331f1e710f99616","modified":1487921669840},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1487921669884},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1487921669887},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1487921669887},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1487921670012},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1487921670042},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1487921670055},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1487921670047},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1487921670059},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1487921670579},{"_id":"themes/next/source/images/100.jpg","hash":"16e1aafc51e60429c766445a0d6b0228be985255","modified":1488015807208},{"_id":"themes/next/source/images/1001.jpg","hash":"f3f0d5705b3e685ecefd8b10fe9361ebadbffbb8","modified":1487997149440},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1487921670587},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1487921670589},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1487921670592},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1487921670595},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1487921670598},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1487921670602},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1487921670605},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1487921670608},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1487921670611},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1487921670612},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1487921670612},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1487921670617},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1487921670618},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1487921670615},{"_id":"source/images/IOWAIT/cpuUseage.png","hash":"9d7a3bb68acfc226a093f2ab9469e3d6a5fe54e5","modified":1487921668488},{"_id":"source/images/IOWAIT/loadAverage.png","hash":"9bded0e98ec25fdf9873f7ce23207cd5cbf733b9","modified":1487921668489},{"_id":"source/images/IOWAIT/loadAverage0223.png","hash":"ede07967c7c2a544bbf0aa5af84f872f38e461db","modified":1487921668491},{"_id":"source/images/multithread/变量在内存中的工作过程.png","hash":"a8ec5a5e81957963f097e6a1125bb2cf25edc1e0","modified":1487921668493},{"_id":"source/images/multithread/线程状态切换.jpg","hash":"391773d5b0c871dc2623b8403e9166aafa170237","modified":1487921668497},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487921669890},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487921669891},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487921670496},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487921670496},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487921670503},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487921670567},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487921670576},{"_id":"source/favicon.ico","hash":"1bea381177df9d7460ea4540d2b5814761f7bfd3","modified":1488015820754},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"bb2c3a926bb7f8fea54d424882b25d93dfde7ae6","modified":1487921668953},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1487921668951},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1487921669829},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1487921669825},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1487921669843},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1487921669849},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1487921669851},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1487921669854},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1487921669868},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1487921669871},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1487921669877},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1487921669890},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1487921669894},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"188423f7df0eb8c99a03cb6741384415651c4665","modified":1487921669896},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"9c8f4b2a29741d96adf0b8fef52ae7f4396f27f5","modified":1487921669937},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1487921669970},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f592adff22628b271ec9657b080cf6b9cc200615","modified":1487921669982},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1487921669991},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1487921670000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1487921670006},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1487921670496},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1487921670499},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1487921670503},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1487921670566},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"d7826b48a20162835450495db534d353ac52e476","modified":1487921670571},{"_id":"themes/next/source/css/_variables/base.styl","hash":"4c4298a7011841d9ee2aec5bd192df5730b08517","modified":1487921670575},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84bdc8a4fe127849a5c99bdefe1d0b65ee1a4a0a","modified":1487921670637},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1487921670641},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1487921670630},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1487921670648},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1487921670658},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1487921670666},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1487921670683},{"_id":"themes/next/source/js/src/utils.js","hash":"e34f83848883732ddd7a34a3e3ed2a293f0f76a7","modified":1487921670692},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1487921670695},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1487921670888},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1487921670892},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1487921670896},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1487921670899},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"8868275e8b6340c87a81c69a54ed138d11fb3c3e","modified":1487921670929},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1487921670931},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1487921670934},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1487921670936},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1487921670939},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1487921670991},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1487921671018},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1487921671022},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1487921671026},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1487921671029},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1487921671037},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1487921671043},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1487921671063},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1487921671066},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1487921671095},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1487921671102},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1487921671128},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1487921671015},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1487921669903},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1487921669908},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1487921669911},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1487921669914},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1487921669919},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1487921669925},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1487921669935},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"e4a13e8cd19762ef3aea0e59dfae8b3c1f251f11","modified":1487921669944},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1487921669950},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1487921669958},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1487921670062},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1487921670065},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1487921670067},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1487921670070},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1487921670113},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1487921670376},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1487921670473},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1487921670474},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1487921670480},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1487921670484},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1487921670489},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1487921670492},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1487921670507},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1487921670510},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1487921670513},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1487921670516},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1487921670520},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1487921670523},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1487921670527},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1487921670535},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1487921670540},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1487921670538},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1487921670541},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1487921670543},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1487921670547},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1487921670549},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"338e9475519ce72af29a1bc05610f9f486e0f1c2","modified":1487921670551},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1487921670554},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1487921670556},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1487921670560},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1487921670563},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1487921670670},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1487921670833},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1487921670834},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1487921670834},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1487921670835},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1487921670836},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1487921670837},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1487921670863},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1487921670874},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1487921670886},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1487921670908},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1487921670926},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"a02674d823c7b577d38c3cdb91953993b6e4b3a0","modified":1487921670942},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1487921670945},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"3c1d63dd1176c77f9f4cdb1616fbb08c31b9822f","modified":1487921670948},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1487921671052},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1487921671060},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1487921670953},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1487921670967},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1487921670985},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1487921670988},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1487921671080},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1487921670072},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1487921670078},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1487921670075},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1487921670081},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1487921670086},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1487921670088},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"cd2def16d31feb234be27dcdce2a919f70cc6919","modified":1487921670093},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1487921670091},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1487921670096},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1487921670099},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1487921670101},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1487921670104},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1487921670106},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1487921670109},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1487921670117},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1487921670119},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1487921670123},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1487921670125},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"e2066dd20747e3125c969ef8459d0015fa5233a2","modified":1487921670128},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1487921670130},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"74e9989a10fc682388cbd25ff7df0d7d4025fb8c","modified":1487921670161},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1487921670163},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1487921670166},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1487921670168},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1487921670185},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1487921670188},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1487921670191},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1487921670284},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1487921670306},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1487921670315},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1487921670329},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1487921670339},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1487921670349},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1487921670358},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1487921670368},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1487921670379},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1487921670394},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1487921670403},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1487921670418},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"c8a05ce90784db9744c22fab22019eb637df1f2f","modified":1487921670427},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"3b1aabbab57b0b1fafa311feb1212f59e78e7928","modified":1487921670436},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1487921670441},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1487921670446},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1487921670452},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1487921670458},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"eb4ede7d7446d8a2f2ddeef3b17f497a6ad30756","modified":1487921670465},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"4f1e9d96940aa3e42d58fb63a26d4fa260323b0d","modified":1487921670469},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1487921670529},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1487921670532},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1487921670544},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1487921670838},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1487921670845},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1487921670837},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1487921670851},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1487921670852},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1487921670860},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1487921670982},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1487921670832},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1487921670978},{"_id":"source/favicon1.ico","hash":"e997cb3d00ffdf8f21a41bd226cfaab7f478a7d6","modified":1487997149393},{"_id":"public/about/index.html","hash":"b77284fb75f58d118f6566866f8b887ef625704c","modified":1488016143008},{"_id":"public/categories/index.html","hash":"0c0a65a7ec75f34cfb2b319759ed21474a14737a","modified":1488016143008},{"_id":"public/archives/index.html","hash":"1ecc8b9318300731f397a8f99bd44796b8987ee6","modified":1488016143009},{"_id":"public/archives/2016/index.html","hash":"c608c53b24e968fd76fcf5d2619d2b3b5ae788ed","modified":1488016143009},{"_id":"public/archives/2016/10/index.html","hash":"d92466cd850c2384667af6df721faf53a84a7f7c","modified":1488016143009},{"_id":"public/archives/2016/11/index.html","hash":"0b67b808b9ae4f8cba4cf2aa7177a111baf17653","modified":1488016143009},{"_id":"public/archives/2016/12/index.html","hash":"c6f96d63a24d58c5daf140e6964ef611275a6759","modified":1488016143009},{"_id":"public/archives/2017/index.html","hash":"09eab7ec5fc3930ec22e6740299428f68d3ff10b","modified":1488016143009},{"_id":"public/archives/2017/01/index.html","hash":"44dd9583eaca1968100b264077322017dacf3883","modified":1488016143009},{"_id":"public/archives/2017/02/index.html","hash":"a5225ef16a752092f9978e23300770c036447362","modified":1488016143009},{"_id":"public/categories/tool/index.html","hash":"c118b89ce411d3610e2a063f135592725ce1b2fe","modified":1488016143009},{"_id":"public/categories/reading-notes/index.html","hash":"7d8face6c5071cd33d44fb9c7f581bbad33936f2","modified":1488016143009},{"_id":"public/categories/系统运维/index.html","hash":"8d5803a19d385b1f0bcb02d92a4b4def41a36e9d","modified":1488016143009},{"_id":"public/categories/消息中间件/index.html","hash":"6c1d73a31a9d0a8179f8e850d89a341185b74003","modified":1488016143009},{"_id":"public/2017/02/23/IOWAIT导致系统负载过高故障排除/index.html","hash":"16c3750b9940757eb466358e81e4edb8a772f4f5","modified":1488016143010},{"_id":"public/2017/01/02/书单--2017/index.html","hash":"5e346c3e6b83b8f93d0cf86ec28ed8fc8d193632","modified":1488016143010},{"_id":"public/2016/12/17/Zookeeper+ActiveMQ+Paho搭建高可用消息推送/index.html","hash":"9fa117e2bf685e93ec4ee47710b8ec5f388d67a4","modified":1488016143010},{"_id":"public/2016/12/10/DesignPatterns/index.html","hash":"b0f8eaed4e0c2c9d9ab4f4ad71f7e8161d260cb7","modified":1488016143010},{"_id":"public/2016/11/20/CentOS搭建SVN服务器/index.html","hash":"af37b9082923097f36529632efee4f035e3a5f0d","modified":1488016143010},{"_id":"public/2016/10/16/书单--2016/index.html","hash":"8ca1b9a543d4ea419990c2c655a199909fa97700","modified":1488016143010},{"_id":"public/2016/10/16/multiThread/index.html","hash":"e998fc8c744d90282b7312e023cec4c2e9469167","modified":1488016143010},{"_id":"public/index.html","hash":"c70fc75b136e3a769d7098c066dffa835e6ccf2f","modified":1488016143011},{"_id":"public/CNAME","hash":"9b62a46bff74511e3da89d8063fab47da61e70dd","modified":1488016143075},{"_id":"public/about/index.md.bak","hash":"aa7a5c5ca419be2a0e17d9ee8720d092825e60ab","modified":1488016143075},{"_id":"public/categories/index.md.bak","hash":"f04220c5aa84b66bddd6f636681179788b15acab","modified":1488016143075},{"_id":"public/images/IOWAIT/IOTOP.png","hash":"775056a51f8902229441d11abe14c6b4e198ca99","modified":1488016143076},{"_id":"public/images/100.jpg","hash":"16e1aafc51e60429c766445a0d6b0228be985255","modified":1488016143076},{"_id":"public/images/1001.jpg","hash":"f3f0d5705b3e685ecefd8b10fe9361ebadbffbb8","modified":1488016143076},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1488016143076},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1488016143076},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1488016143076},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1488016143076},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1488016143076},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1488016143077},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1488016143077},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1488016143077},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1488016143077},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488016143077},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488016143077},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1488016143077},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1488016143078},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1488016143078},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1488016143078},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1488016143078},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488016143078},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488016143078},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488016143078},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488016143078},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1488016143078},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488016143078},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1488016143078},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1488016143078},{"_id":"public/images/IOWAIT/cpuUseage.png","hash":"9d7a3bb68acfc226a093f2ab9469e3d6a5fe54e5","modified":1488016143899},{"_id":"public/images/IOWAIT/loadAverage.png","hash":"9bded0e98ec25fdf9873f7ce23207cd5cbf733b9","modified":1488016143901},{"_id":"public/images/IOWAIT/loadAverage0223.png","hash":"ede07967c7c2a544bbf0aa5af84f872f38e461db","modified":1488016143919},{"_id":"public/images/multithread/变量在内存中的工作过程.png","hash":"a8ec5a5e81957963f097e6a1125bb2cf25edc1e0","modified":1488016143919},{"_id":"public/images/multithread/线程状态切换.jpg","hash":"391773d5b0c871dc2623b8403e9166aafa170237","modified":1488016143920},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1488016143920},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1488016143920},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1488016143920},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1488016143920},{"_id":"public/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1488016143948},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1488016143949},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1488016143949},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1488016143949},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1488016143949},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1488016143949},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1488016143949},{"_id":"public/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1488016143949},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1488016143949},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1488016143949},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1488016143950},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1488016143950},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1488016143950},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1488016143950},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1488016143950},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1488016143950},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1488016143950},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1488016143950},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1488016143950},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1488016143950},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1488016143950},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1488016143951},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1488016143951},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1488016143951},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1488016143951},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1488016143951},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1488016143951},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1488016143951},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1488016143951},{"_id":"public/css/main.css","hash":"9beb368f53d71941780d5828a4b34071880f3a90","modified":1488016143951},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1488016143951},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1488016143952},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1488016143952},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1488016143952},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1488016143953},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1488016143953},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1488016143953},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1488016143953},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1488016143953},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1488016143953},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1488016143953},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1488016143996},{"_id":"public/favicon.ico","hash":"1bea381177df9d7460ea4540d2b5814761f7bfd3","modified":1488016143999},{"_id":"public/favicon1.ico","hash":"e997cb3d00ffdf8f21a41bd226cfaab7f478a7d6","modified":1488016144620}],"Category":[{"name":"tool","_id":"cizl2e33r0002rcct4roin2ei"},{"name":"reading notes","_id":"cizl2e3420006rcctpa4x1hoy"},{"name":"系统运维","_id":"cizl2e349000arcct1pw279uh"},{"name":"消息中间件","_id":"cizl2e34b000crcctns3cj9su"}],"Data":[],"Page":[{"date":"2016-11-17T06:12:52.000Z","comments":0,"_content":"\n# about me\n职业：野生程序猿\n语言：精通汉语（貌似有点过）、略懂英语（反正吃的不是大学与高中的老本）、熟练java（简历一般都这么写）\n坐标：广东佛山\n公司：创业公司\n联系：omed_5 at 163 dot com\n\n# about this blog\n作为java程序猿一枚，搭建blog居然没用java，应该感到羞愧！\n可我大java用来写小blog，岂不是大材小用？！\n好吧，实际情况是：~~没有拉风的io域名~~已斥巨资购得io域名；没有稳定的服务器；前端渣，又没找到好看的UI；没有好的java实现；还有，确实是大材小用！\n偶然看到[老罗的骄子的博客](http://roosephu.github.io/)（老罗啊老罗，你还好么。。），眼前一亮。嗯，就这个了，~~[Hexo](https://hexo.io/) + [GitHub Pages](https://pages.github.com/)！~~ 已由GitHub Pages迁移至[Code Pages](https://coding.net/)！\nHexo + GitHub Pages 不能忍的是在不同电脑发布blog特费劲，目前采取的方式是在网站发布的仓库中建hexo分支用来管理网站文件。大致方法参考[GitHub Pages + Hexo搭建博客](http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/)，要注意的是文章也有坑，最好是看完评论后再动手。\n\n# the best wishes\n用博客，记录与见证成长！\n","source":"about/index.md","raw":"---\ndate: 2016-11-17 14:12:52\ncomments: false\n---\n\n# about me\n职业：野生程序猿\n语言：精通汉语（貌似有点过）、略懂英语（反正吃的不是大学与高中的老本）、熟练java（简历一般都这么写）\n坐标：广东佛山\n公司：创业公司\n联系：omed_5 at 163 dot com\n\n# about this blog\n作为java程序猿一枚，搭建blog居然没用java，应该感到羞愧！\n可我大java用来写小blog，岂不是大材小用？！\n好吧，实际情况是：~~没有拉风的io域名~~已斥巨资购得io域名；没有稳定的服务器；前端渣，又没找到好看的UI；没有好的java实现；还有，确实是大材小用！\n偶然看到[老罗的骄子的博客](http://roosephu.github.io/)（老罗啊老罗，你还好么。。），眼前一亮。嗯，就这个了，~~[Hexo](https://hexo.io/) + [GitHub Pages](https://pages.github.com/)！~~ 已由GitHub Pages迁移至[Code Pages](https://coding.net/)！\nHexo + GitHub Pages 不能忍的是在不同电脑发布blog特费劲，目前采取的方式是在网站发布的仓库中建hexo分支用来管理网站文件。大致方法参考[GitHub Pages + Hexo搭建博客](http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/)，要注意的是文章也有坑，最好是看完评论后再动手。\n\n# the best wishes\n用博客，记录与见证成长！\n","updated":"2017-02-24T07:41:17.948Z","path":"about/index.html","title":"","layout":"page","_id":"cizl2e38k000jrcctes1v9a8g","content":"<h1 id=\"about-me\"><a href=\"#about-me\" class=\"headerlink\" title=\"about me\"></a>about me</h1><p>职业：野生程序猿<br>语言：精通汉语（貌似有点过）、略懂英语（反正吃的不是大学与高中的老本）、熟练java（简历一般都这么写）<br>坐标：广东佛山<br>公司：创业公司<br>联系：omed_5 at 163 dot com</p>\n<h1 id=\"about-this-blog\"><a href=\"#about-this-blog\" class=\"headerlink\" title=\"about this blog\"></a>about this blog</h1><p>作为java程序猿一枚，搭建blog居然没用java，应该感到羞愧！<br>可我大java用来写小blog，岂不是大材小用？！<br>好吧，实际情况是：<del>没有拉风的io域名</del>已斥巨资购得io域名；没有稳定的服务器；前端渣，又没找到好看的UI；没有好的java实现；还有，确实是大材小用！<br>偶然看到<a href=\"http://roosephu.github.io/\" target=\"_blank\" rel=\"external\">老罗的骄子的博客</a>（老罗啊老罗，你还好么。。），眼前一亮。嗯，就这个了，<del><a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a> + <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">GitHub Pages</a>！</del> 已由GitHub Pages迁移至<a href=\"https://coding.net/\" target=\"_blank\" rel=\"external\">Code Pages</a>！<br>Hexo + GitHub Pages 不能忍的是在不同电脑发布blog特费劲，目前采取的方式是在网站发布的仓库中建hexo分支用来管理网站文件。大致方法参考<a href=\"http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/\" target=\"_blank\" rel=\"external\">GitHub Pages + Hexo搭建博客</a>，要注意的是文章也有坑，最好是看完评论后再动手。</p>\n<h1 id=\"the-best-wishes\"><a href=\"#the-best-wishes\" class=\"headerlink\" title=\"the best wishes\"></a>the best wishes</h1><p>用博客，记录与见证成长！</p>\n","excerpt":"","more":"<h1 id=\"about-me\"><a href=\"#about-me\" class=\"headerlink\" title=\"about me\"></a>about me</h1><p>职业：野生程序猿<br>语言：精通汉语（貌似有点过）、略懂英语（反正吃的不是大学与高中的老本）、熟练java（简历一般都这么写）<br>坐标：广东佛山<br>公司：创业公司<br>联系：omed_5 at 163 dot com</p>\n<h1 id=\"about-this-blog\"><a href=\"#about-this-blog\" class=\"headerlink\" title=\"about this blog\"></a>about this blog</h1><p>作为java程序猿一枚，搭建blog居然没用java，应该感到羞愧！<br>可我大java用来写小blog，岂不是大材小用？！<br>好吧，实际情况是：<del>没有拉风的io域名</del>已斥巨资购得io域名；没有稳定的服务器；前端渣，又没找到好看的UI；没有好的java实现；还有，确实是大材小用！<br>偶然看到<a href=\"http://roosephu.github.io/\">老罗的骄子的博客</a>（老罗啊老罗，你还好么。。），眼前一亮。嗯，就这个了，<del><a href=\"https://hexo.io/\">Hexo</a> + <a href=\"https://pages.github.com/\">GitHub Pages</a>！</del> 已由GitHub Pages迁移至<a href=\"https://coding.net/\">Code Pages</a>！<br>Hexo + GitHub Pages 不能忍的是在不同电脑发布blog特费劲，目前采取的方式是在网站发布的仓库中建hexo分支用来管理网站文件。大致方法参考<a href=\"http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/\">GitHub Pages + Hexo搭建博客</a>，要注意的是文章也有坑，最好是看完评论后再动手。</p>\n<h1 id=\"the-best-wishes\"><a href=\"#the-best-wishes\" class=\"headerlink\" title=\"the best wishes\"></a>the best wishes</h1><p>用博客，记录与见证成长！</p>\n"},{"title":"categories","date":"2016-11-17T06:25:53.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-11-17 14:25:53\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-02-24T07:34:28.473Z","path":"categories/index.html","layout":"page","_id":"cizl2e38l000krcctmov42wsp","content":"","excerpt":"","more":""}],"Post":[{"title":"CentOS搭建SVN服务器","date":"2016-11-19T16:00:00.000Z","_content":"\n```\n# yum安装\nyum -y install subversion\n\n# 创建版本库\nmkdir -p /home/svn/repos\nsvnadmin create /home/svn/repos\n\n# 设置用户名及密码\nvim /home/svn/repos/passwd\n\n[user]\nuser = user\nuser1 = user1\nuser2 = user2\n\n# 设置用户分组及权限\nvim /home/svn/repos/authz\n\n[groups]\nadmin = user\njava = user1,user2\n\n[repos:/]\n@admin = rw\n* =\n\n[repos:/javaweb]\n@admin = rw\n@java = rw\n\n# 设置访问权限\nvim /home/svn/repos/svnserve.conf\n[general]\nanon-access = none\nauth-access = write\n\n# 开放访问端口\niptables -I INPUT 4 -p tcp -m state --state NEW -m tcp --dport 3690 -j ACCEPT\nservice iptables save\n\n# 启动svn\nsvnserve -d -r /home/svn/\n\n# 查看pid\nps -ef | grep svnserve\n\n# 关闭svn\nkill -9 ${pid}\n\n# 删除版本库\nrm -rf /home/svn/repos/\n```\n","source":"_posts/CentOS搭建SVN服务器.md","raw":"---\ntitle: CentOS搭建SVN服务器\ncategory: \"tool\"\ndate: 2016/11/20\n---\n\n```\n# yum安装\nyum -y install subversion\n\n# 创建版本库\nmkdir -p /home/svn/repos\nsvnadmin create /home/svn/repos\n\n# 设置用户名及密码\nvim /home/svn/repos/passwd\n\n[user]\nuser = user\nuser1 = user1\nuser2 = user2\n\n# 设置用户分组及权限\nvim /home/svn/repos/authz\n\n[groups]\nadmin = user\njava = user1,user2\n\n[repos:/]\n@admin = rw\n* =\n\n[repos:/javaweb]\n@admin = rw\n@java = rw\n\n# 设置访问权限\nvim /home/svn/repos/svnserve.conf\n[general]\nanon-access = none\nauth-access = write\n\n# 开放访问端口\niptables -I INPUT 4 -p tcp -m state --state NEW -m tcp --dport 3690 -j ACCEPT\nservice iptables save\n\n# 启动svn\nsvnserve -d -r /home/svn/\n\n# 查看pid\nps -ef | grep svnserve\n\n# 关闭svn\nkill -9 ${pid}\n\n# 删除版本库\nrm -rf /home/svn/repos/\n```\n","slug":"CentOS搭建SVN服务器","published":1,"updated":"2017-02-24T07:34:28.446Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizl2e33m0000rcctgegg7c3b","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"># yum安装</div><div class=\"line\">yum -y install subversion</div><div class=\"line\"></div><div class=\"line\"># 创建版本库</div><div class=\"line\">mkdir -p /home/svn/repos</div><div class=\"line\">svnadmin create /home/svn/repos</div><div class=\"line\"></div><div class=\"line\"># 设置用户名及密码</div><div class=\"line\">vim /home/svn/repos/passwd</div><div class=\"line\"></div><div class=\"line\">[user]</div><div class=\"line\">user = user</div><div class=\"line\">user1 = user1</div><div class=\"line\">user2 = user2</div><div class=\"line\"></div><div class=\"line\"># 设置用户分组及权限</div><div class=\"line\">vim /home/svn/repos/authz</div><div class=\"line\"></div><div class=\"line\">[groups]</div><div class=\"line\">admin = user</div><div class=\"line\">java = user1,user2</div><div class=\"line\"></div><div class=\"line\">[repos:/]</div><div class=\"line\">@admin = rw</div><div class=\"line\">* =</div><div class=\"line\"></div><div class=\"line\">[repos:/javaweb]</div><div class=\"line\">@admin = rw</div><div class=\"line\">@java = rw</div><div class=\"line\"></div><div class=\"line\"># 设置访问权限</div><div class=\"line\">vim /home/svn/repos/svnserve.conf</div><div class=\"line\">[general]</div><div class=\"line\">anon-access = none</div><div class=\"line\">auth-access = write</div><div class=\"line\"></div><div class=\"line\"># 开放访问端口</div><div class=\"line\">iptables -I INPUT 4 -p tcp -m state --state NEW -m tcp --dport 3690 -j ACCEPT</div><div class=\"line\">service iptables save</div><div class=\"line\"></div><div class=\"line\"># 启动svn</div><div class=\"line\">svnserve -d -r /home/svn/</div><div class=\"line\"></div><div class=\"line\"># 查看pid</div><div class=\"line\">ps -ef | grep svnserve</div><div class=\"line\"></div><div class=\"line\"># 关闭svn</div><div class=\"line\">kill -9 $&#123;pid&#125;</div><div class=\"line\"></div><div class=\"line\"># 删除版本库</div><div class=\"line\">rm -rf /home/svn/repos/</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"># yum安装</div><div class=\"line\">yum -y install subversion</div><div class=\"line\"></div><div class=\"line\"># 创建版本库</div><div class=\"line\">mkdir -p /home/svn/repos</div><div class=\"line\">svnadmin create /home/svn/repos</div><div class=\"line\"></div><div class=\"line\"># 设置用户名及密码</div><div class=\"line\">vim /home/svn/repos/passwd</div><div class=\"line\"></div><div class=\"line\">[user]</div><div class=\"line\">user = user</div><div class=\"line\">user1 = user1</div><div class=\"line\">user2 = user2</div><div class=\"line\"></div><div class=\"line\"># 设置用户分组及权限</div><div class=\"line\">vim /home/svn/repos/authz</div><div class=\"line\"></div><div class=\"line\">[groups]</div><div class=\"line\">admin = user</div><div class=\"line\">java = user1,user2</div><div class=\"line\"></div><div class=\"line\">[repos:/]</div><div class=\"line\">@admin = rw</div><div class=\"line\">* =</div><div class=\"line\"></div><div class=\"line\">[repos:/javaweb]</div><div class=\"line\">@admin = rw</div><div class=\"line\">@java = rw</div><div class=\"line\"></div><div class=\"line\"># 设置访问权限</div><div class=\"line\">vim /home/svn/repos/svnserve.conf</div><div class=\"line\">[general]</div><div class=\"line\">anon-access = none</div><div class=\"line\">auth-access = write</div><div class=\"line\"></div><div class=\"line\"># 开放访问端口</div><div class=\"line\">iptables -I INPUT 4 -p tcp -m state --state NEW -m tcp --dport 3690 -j ACCEPT</div><div class=\"line\">service iptables save</div><div class=\"line\"></div><div class=\"line\"># 启动svn</div><div class=\"line\">svnserve -d -r /home/svn/</div><div class=\"line\"></div><div class=\"line\"># 查看pid</div><div class=\"line\">ps -ef | grep svnserve</div><div class=\"line\"></div><div class=\"line\"># 关闭svn</div><div class=\"line\">kill -9 $&#123;pid&#125;</div><div class=\"line\"></div><div class=\"line\"># 删除版本库</div><div class=\"line\">rm -rf /home/svn/repos/</div></pre></td></tr></table></figure>\n"},{"title":"Head First Design Patterns","date":"2016-12-09T16:00:00.000Z","update":"2016/12/19","_content":"\n\n# 写在前面\n书名：Head First Design Patterns\n作者： Eric Freeman and Elisabeth\n\n第一次阅读周期（中文版）：2016-12-10 至 现在\n代码地址：[HeadFirstDesignPatterns](https://github.com/oomeD/ReadingNotes/tree/master/HeadFirstDesignPatterns)\n\n<!--more-->\n\n#  策略模式（strategy pattern）\n1. 概述：策略模式定义了一系列的算法，并将每一个算法封装起来，让它们之间可以相互替换。策略模式让算法的变化独立于使用它的客户。\n2. 设计原则：\n    1. 把会变化的部分取出并封装起来，好让其他部分不受到影响\n    2. 针对接口编程，而不是针对实现编程\n        1. 一个接口代表一个行为，行为的每个实现（暂时命名为行为类）都实现这个接口。也就是**接口的功能在行为类中实现**。\n        2. 真正需要实现功能的类不实现接口（暂时命名为功能类），功能类要实现功能时，把功能的实现委托给行为类。\n        3. 在功能类或其父类中，声明接口为变量。运行时将行为类指向接口。功能类在功能实现方法中，调用接口的方法。也就是**多态地调用行为类的方法**\n    3. 多用组合少用继承。\n        1. “有一个”比“是一个”更好。对象有一个行为，便可以将这个行为委托给行为类处理\n        2. 功能类和行为类结合起来使用就是“组合”。与继承不同的是，功能类的功能不是继承而来的，而是与适当的行为类组合而来的。\n3. 功效：\n    1. 运行时设定行为\n    2. 行为类可以轻易地扩充和改变\n\n# 观察者模式（observer pattern）\n1. 概述：观察者模式定义了对象之间的**一对多依赖**，当一个对象改变状态，它的所有依赖者都会收到通知并自动更新。观察者模式有被观察者推送和观察者拉取两种方式\n2. 设计原则：\n    1. 为交互对象之间的松耦合设计而努力，将对象之间的相互依赖降到最低。\n3. 功效：\n    1. 观察者可以随时注册或注销自己的观察者角色\n    2. 被观察者只需要关注消息的变更与发布。不用关心观察者有哪些\n\n# 装饰者模式（decorator pattern）\n1. 概述：在不改变原类文件和不使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。\n2. 设计原则：类应该对扩展开放，对修改关闭\n    1. 允许类容易扩展，在不修改现在代码的情况下，可搭配新的行为。\n    2. 遵循开放-关闭原则，通常会引入新的抽象层次，增加代码复杂程度。需要把精力放在最有可能改变的地方，然后应用开闭原则。\n3. 缺点：有大量小类，可能造成API调用的困扰\n4. 功效：在不改变原类文件和不使用继承的情况下，动态地扩展一个对象的功能。\n\n# 工厂方法模式（factory method pattern）\n1. 概述：定义一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类中。\n2. 设计原则：封装变化、松耦合。\n3. 功效：便于管理对象的创建，将产品的“实现”从“使用”中解耦。\n\n# 抽象工厂模式（abstract factory pattern）\n1. 概述：提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。抽象工厂模式是所有形态的工厂模式中最为抽象和最具一般性的一种形态。抽象工厂模式是指当有多个抽象角色时，使用的一种工厂模式。抽象工厂模式可以向客户端提供一个接口，使客户端在不必指定产品的具体的情况下，创建多个产品族中的产品对象。根据里氏替换原则，任何接受父类型的地方，都应当能够接受子类型。因此，实际上系统所需要的，仅仅是类型与这些抽象产品角色相同的一些实例，而不是这些抽象产品的实例。换言之，也就是这些抽象产品的具体子类的实例。工厂类负责创建抽象产品的具体子类的实例。\n2. 设计原则：依赖抽象，不依赖于具体。（依赖倒置）\n3. 功效：\n    1. 分离了具体的类\n    2. 使得易于交换产品系列\n    3. 有利于产品的一致性\n\n# 单例模式\n1. 概述：确保一个类只有一个实例，并提供全局访问点\n","source":"_posts/DesignPatterns.md","raw":"---\ntitle: Head First Design Patterns\ncategory: \"reading notes\"\ndate: 2016/12/10\nupdate: 2016/12/19\n---\n\n\n# 写在前面\n书名：Head First Design Patterns\n作者： Eric Freeman and Elisabeth\n\n第一次阅读周期（中文版）：2016-12-10 至 现在\n代码地址：[HeadFirstDesignPatterns](https://github.com/oomeD/ReadingNotes/tree/master/HeadFirstDesignPatterns)\n\n<!--more-->\n\n#  策略模式（strategy pattern）\n1. 概述：策略模式定义了一系列的算法，并将每一个算法封装起来，让它们之间可以相互替换。策略模式让算法的变化独立于使用它的客户。\n2. 设计原则：\n    1. 把会变化的部分取出并封装起来，好让其他部分不受到影响\n    2. 针对接口编程，而不是针对实现编程\n        1. 一个接口代表一个行为，行为的每个实现（暂时命名为行为类）都实现这个接口。也就是**接口的功能在行为类中实现**。\n        2. 真正需要实现功能的类不实现接口（暂时命名为功能类），功能类要实现功能时，把功能的实现委托给行为类。\n        3. 在功能类或其父类中，声明接口为变量。运行时将行为类指向接口。功能类在功能实现方法中，调用接口的方法。也就是**多态地调用行为类的方法**\n    3. 多用组合少用继承。\n        1. “有一个”比“是一个”更好。对象有一个行为，便可以将这个行为委托给行为类处理\n        2. 功能类和行为类结合起来使用就是“组合”。与继承不同的是，功能类的功能不是继承而来的，而是与适当的行为类组合而来的。\n3. 功效：\n    1. 运行时设定行为\n    2. 行为类可以轻易地扩充和改变\n\n# 观察者模式（observer pattern）\n1. 概述：观察者模式定义了对象之间的**一对多依赖**，当一个对象改变状态，它的所有依赖者都会收到通知并自动更新。观察者模式有被观察者推送和观察者拉取两种方式\n2. 设计原则：\n    1. 为交互对象之间的松耦合设计而努力，将对象之间的相互依赖降到最低。\n3. 功效：\n    1. 观察者可以随时注册或注销自己的观察者角色\n    2. 被观察者只需要关注消息的变更与发布。不用关心观察者有哪些\n\n# 装饰者模式（decorator pattern）\n1. 概述：在不改变原类文件和不使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。\n2. 设计原则：类应该对扩展开放，对修改关闭\n    1. 允许类容易扩展，在不修改现在代码的情况下，可搭配新的行为。\n    2. 遵循开放-关闭原则，通常会引入新的抽象层次，增加代码复杂程度。需要把精力放在最有可能改变的地方，然后应用开闭原则。\n3. 缺点：有大量小类，可能造成API调用的困扰\n4. 功效：在不改变原类文件和不使用继承的情况下，动态地扩展一个对象的功能。\n\n# 工厂方法模式（factory method pattern）\n1. 概述：定义一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类中。\n2. 设计原则：封装变化、松耦合。\n3. 功效：便于管理对象的创建，将产品的“实现”从“使用”中解耦。\n\n# 抽象工厂模式（abstract factory pattern）\n1. 概述：提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。抽象工厂模式是所有形态的工厂模式中最为抽象和最具一般性的一种形态。抽象工厂模式是指当有多个抽象角色时，使用的一种工厂模式。抽象工厂模式可以向客户端提供一个接口，使客户端在不必指定产品的具体的情况下，创建多个产品族中的产品对象。根据里氏替换原则，任何接受父类型的地方，都应当能够接受子类型。因此，实际上系统所需要的，仅仅是类型与这些抽象产品角色相同的一些实例，而不是这些抽象产品的实例。换言之，也就是这些抽象产品的具体子类的实例。工厂类负责创建抽象产品的具体子类的实例。\n2. 设计原则：依赖抽象，不依赖于具体。（依赖倒置）\n3. 功效：\n    1. 分离了具体的类\n    2. 使得易于交换产品系列\n    3. 有利于产品的一致性\n\n# 单例模式\n1. 概述：确保一个类只有一个实例，并提供全局访问点\n","slug":"DesignPatterns","published":1,"updated":"2017-02-24T07:34:28.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizl2e33p0001rcct8llgfgbj","content":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>书名：Head First Design Patterns<br>作者： Eric Freeman and Elisabeth</p>\n<p>第一次阅读周期（中文版）：2016-12-10 至 现在<br>代码地址：<a href=\"https://github.com/oomeD/ReadingNotes/tree/master/HeadFirstDesignPatterns\" target=\"_blank\" rel=\"external\">HeadFirstDesignPatterns</a></p>\n<a id=\"more\"></a>\n<h1 id=\"策略模式（strategy-pattern）\"><a href=\"#策略模式（strategy-pattern）\" class=\"headerlink\" title=\"策略模式（strategy pattern）\"></a>策略模式（strategy pattern）</h1><ol>\n<li>概述：策略模式定义了一系列的算法，并将每一个算法封装起来，让它们之间可以相互替换。策略模式让算法的变化独立于使用它的客户。</li>\n<li>设计原则：<ol>\n<li>把会变化的部分取出并封装起来，好让其他部分不受到影响</li>\n<li>针对接口编程，而不是针对实现编程<ol>\n<li>一个接口代表一个行为，行为的每个实现（暂时命名为行为类）都实现这个接口。也就是<strong>接口的功能在行为类中实现</strong>。</li>\n<li>真正需要实现功能的类不实现接口（暂时命名为功能类），功能类要实现功能时，把功能的实现委托给行为类。</li>\n<li>在功能类或其父类中，声明接口为变量。运行时将行为类指向接口。功能类在功能实现方法中，调用接口的方法。也就是<strong>多态地调用行为类的方法</strong></li>\n</ol>\n</li>\n<li>多用组合少用继承。<ol>\n<li>“有一个”比“是一个”更好。对象有一个行为，便可以将这个行为委托给行为类处理</li>\n<li>功能类和行为类结合起来使用就是“组合”。与继承不同的是，功能类的功能不是继承而来的，而是与适当的行为类组合而来的。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>功效：<ol>\n<li>运行时设定行为</li>\n<li>行为类可以轻易地扩充和改变</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"观察者模式（observer-pattern）\"><a href=\"#观察者模式（observer-pattern）\" class=\"headerlink\" title=\"观察者模式（observer pattern）\"></a>观察者模式（observer pattern）</h1><ol>\n<li>概述：观察者模式定义了对象之间的<strong>一对多依赖</strong>，当一个对象改变状态，它的所有依赖者都会收到通知并自动更新。观察者模式有被观察者推送和观察者拉取两种方式</li>\n<li>设计原则：<ol>\n<li>为交互对象之间的松耦合设计而努力，将对象之间的相互依赖降到最低。</li>\n</ol>\n</li>\n<li>功效：<ol>\n<li>观察者可以随时注册或注销自己的观察者角色</li>\n<li>被观察者只需要关注消息的变更与发布。不用关心观察者有哪些</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"装饰者模式（decorator-pattern）\"><a href=\"#装饰者模式（decorator-pattern）\" class=\"headerlink\" title=\"装饰者模式（decorator pattern）\"></a>装饰者模式（decorator pattern）</h1><ol>\n<li>概述：在不改变原类文件和不使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。</li>\n<li>设计原则：类应该对扩展开放，对修改关闭<ol>\n<li>允许类容易扩展，在不修改现在代码的情况下，可搭配新的行为。</li>\n<li>遵循开放-关闭原则，通常会引入新的抽象层次，增加代码复杂程度。需要把精力放在最有可能改变的地方，然后应用开闭原则。</li>\n</ol>\n</li>\n<li>缺点：有大量小类，可能造成API调用的困扰</li>\n<li>功效：在不改变原类文件和不使用继承的情况下，动态地扩展一个对象的功能。</li>\n</ol>\n<h1 id=\"工厂方法模式（factory-method-pattern）\"><a href=\"#工厂方法模式（factory-method-pattern）\" class=\"headerlink\" title=\"工厂方法模式（factory method pattern）\"></a>工厂方法模式（factory method pattern）</h1><ol>\n<li>概述：定义一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类中。</li>\n<li>设计原则：封装变化、松耦合。</li>\n<li>功效：便于管理对象的创建，将产品的“实现”从“使用”中解耦。</li>\n</ol>\n<h1 id=\"抽象工厂模式（abstract-factory-pattern）\"><a href=\"#抽象工厂模式（abstract-factory-pattern）\" class=\"headerlink\" title=\"抽象工厂模式（abstract factory pattern）\"></a>抽象工厂模式（abstract factory pattern）</h1><ol>\n<li>概述：提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。抽象工厂模式是所有形态的工厂模式中最为抽象和最具一般性的一种形态。抽象工厂模式是指当有多个抽象角色时，使用的一种工厂模式。抽象工厂模式可以向客户端提供一个接口，使客户端在不必指定产品的具体的情况下，创建多个产品族中的产品对象。根据里氏替换原则，任何接受父类型的地方，都应当能够接受子类型。因此，实际上系统所需要的，仅仅是类型与这些抽象产品角色相同的一些实例，而不是这些抽象产品的实例。换言之，也就是这些抽象产品的具体子类的实例。工厂类负责创建抽象产品的具体子类的实例。</li>\n<li>设计原则：依赖抽象，不依赖于具体。（依赖倒置）</li>\n<li>功效：<ol>\n<li>分离了具体的类</li>\n<li>使得易于交换产品系列</li>\n<li>有利于产品的一致性</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h1><ol>\n<li>概述：确保一个类只有一个实例，并提供全局访问点</li>\n</ol>\n","excerpt":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>书名：Head First Design Patterns<br>作者： Eric Freeman and Elisabeth</p>\n<p>第一次阅读周期（中文版）：2016-12-10 至 现在<br>代码地址：<a href=\"https://github.com/oomeD/ReadingNotes/tree/master/HeadFirstDesignPatterns\">HeadFirstDesignPatterns</a></p>","more":"<h1 id=\"策略模式（strategy-pattern）\"><a href=\"#策略模式（strategy-pattern）\" class=\"headerlink\" title=\"策略模式（strategy pattern）\"></a>策略模式（strategy pattern）</h1><ol>\n<li>概述：策略模式定义了一系列的算法，并将每一个算法封装起来，让它们之间可以相互替换。策略模式让算法的变化独立于使用它的客户。</li>\n<li>设计原则：<ol>\n<li>把会变化的部分取出并封装起来，好让其他部分不受到影响</li>\n<li>针对接口编程，而不是针对实现编程<ol>\n<li>一个接口代表一个行为，行为的每个实现（暂时命名为行为类）都实现这个接口。也就是<strong>接口的功能在行为类中实现</strong>。</li>\n<li>真正需要实现功能的类不实现接口（暂时命名为功能类），功能类要实现功能时，把功能的实现委托给行为类。</li>\n<li>在功能类或其父类中，声明接口为变量。运行时将行为类指向接口。功能类在功能实现方法中，调用接口的方法。也就是<strong>多态地调用行为类的方法</strong></li>\n</ol>\n</li>\n<li>多用组合少用继承。<ol>\n<li>“有一个”比“是一个”更好。对象有一个行为，便可以将这个行为委托给行为类处理</li>\n<li>功能类和行为类结合起来使用就是“组合”。与继承不同的是，功能类的功能不是继承而来的，而是与适当的行为类组合而来的。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>功效：<ol>\n<li>运行时设定行为</li>\n<li>行为类可以轻易地扩充和改变</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"观察者模式（observer-pattern）\"><a href=\"#观察者模式（observer-pattern）\" class=\"headerlink\" title=\"观察者模式（observer pattern）\"></a>观察者模式（observer pattern）</h1><ol>\n<li>概述：观察者模式定义了对象之间的<strong>一对多依赖</strong>，当一个对象改变状态，它的所有依赖者都会收到通知并自动更新。观察者模式有被观察者推送和观察者拉取两种方式</li>\n<li>设计原则：<ol>\n<li>为交互对象之间的松耦合设计而努力，将对象之间的相互依赖降到最低。</li>\n</ol>\n</li>\n<li>功效：<ol>\n<li>观察者可以随时注册或注销自己的观察者角色</li>\n<li>被观察者只需要关注消息的变更与发布。不用关心观察者有哪些</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"装饰者模式（decorator-pattern）\"><a href=\"#装饰者模式（decorator-pattern）\" class=\"headerlink\" title=\"装饰者模式（decorator pattern）\"></a>装饰者模式（decorator pattern）</h1><ol>\n<li>概述：在不改变原类文件和不使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。</li>\n<li>设计原则：类应该对扩展开放，对修改关闭<ol>\n<li>允许类容易扩展，在不修改现在代码的情况下，可搭配新的行为。</li>\n<li>遵循开放-关闭原则，通常会引入新的抽象层次，增加代码复杂程度。需要把精力放在最有可能改变的地方，然后应用开闭原则。</li>\n</ol>\n</li>\n<li>缺点：有大量小类，可能造成API调用的困扰</li>\n<li>功效：在不改变原类文件和不使用继承的情况下，动态地扩展一个对象的功能。</li>\n</ol>\n<h1 id=\"工厂方法模式（factory-method-pattern）\"><a href=\"#工厂方法模式（factory-method-pattern）\" class=\"headerlink\" title=\"工厂方法模式（factory method pattern）\"></a>工厂方法模式（factory method pattern）</h1><ol>\n<li>概述：定义一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类中。</li>\n<li>设计原则：封装变化、松耦合。</li>\n<li>功效：便于管理对象的创建，将产品的“实现”从“使用”中解耦。</li>\n</ol>\n<h1 id=\"抽象工厂模式（abstract-factory-pattern）\"><a href=\"#抽象工厂模式（abstract-factory-pattern）\" class=\"headerlink\" title=\"抽象工厂模式（abstract factory pattern）\"></a>抽象工厂模式（abstract factory pattern）</h1><ol>\n<li>概述：提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。抽象工厂模式是所有形态的工厂模式中最为抽象和最具一般性的一种形态。抽象工厂模式是指当有多个抽象角色时，使用的一种工厂模式。抽象工厂模式可以向客户端提供一个接口，使客户端在不必指定产品的具体的情况下，创建多个产品族中的产品对象。根据里氏替换原则，任何接受父类型的地方，都应当能够接受子类型。因此，实际上系统所需要的，仅仅是类型与这些抽象产品角色相同的一些实例，而不是这些抽象产品的实例。换言之，也就是这些抽象产品的具体子类的实例。工厂类负责创建抽象产品的具体子类的实例。</li>\n<li>设计原则：依赖抽象，不依赖于具体。（依赖倒置）</li>\n<li>功效：<ol>\n<li>分离了具体的类</li>\n<li>使得易于交换产品系列</li>\n<li>有利于产品的一致性</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h1><ol>\n<li>概述：确保一个类只有一个实例，并提供全局访问点</li>\n</ol>"},{"title":"IOWAIT导致系统负载过高故障排除","date":"2017-02-22T16:00:00.000Z","_content":"\n# 1. 系统环境\n- CentOs 6.5\n- 1核1GB内存\n\n# 2. 问题描述\n系统负载频繁告警<br>\n![loadAverage0218](/images/IOWAIT/loadAverage.png)\n![cpuUseage0218](/images/IOWAIT/cpuUseage.png)\n\n# 3. 问题解决\n## 3.1 查因\n### 3.1.1 定位哪个进程引起的IOWAIT\n- 安装iotop命令\n```\nyum install iotop\n```\n- 使用iotop查看IO状态\n![IOTOP](/images/IOWAIT/IOTOP.png)\n\n### 3.1.2 关于kswapd0\n- Linux uses kswapd for virtual memory management such that pages that have been recently accessed are kept in memory and less active pages are paged out to disk.\n- 系统每过一定时间就会唤醒kswapd进程，查看内存资源是否紧张，如果不紧张，则继续睡眠。在kswapd中，有2个阀值，pages_hige和pages_low，当空闲内存页的数量低于pages_low的时候，kswapd进程就会扫描内存并且每次释放出32个free pages，直到free page的数量到达pages_high。\n- 也就是说kswapd0是有内存资源不足而唤醒的，它去扫描并释放空闲内存，期间会执行大量的换页操作，极有可能就是此进程造成的IO 100%耗尽。\n\n## 3.2 解决方法\n加1G内存<br>\n![loadAverage0223](/images/IOWAIT/loadAverage0223.png)\n\n# 4.参考文章\n- [Troubleshooting High I/O Wait in Linux](http://bencane.com/2012/08/06/troubleshooting-high-io-wait-in-linux/)\n- [quan：Exadata计算节点由kswapd0进程引起的IO使用率100%，内存不足的故障处理](http://blog.itpub.net/22878696/viewspace-1805953/)\n","source":"_posts/IOWAIT导致系统负载过高故障排除.md","raw":"---\ntitle: IOWAIT导致系统负载过高故障排除\ncategory:\n- 系统运维\ndate: 2017/02/23\n---\n\n# 1. 系统环境\n- CentOs 6.5\n- 1核1GB内存\n\n# 2. 问题描述\n系统负载频繁告警<br>\n![loadAverage0218](/images/IOWAIT/loadAverage.png)\n![cpuUseage0218](/images/IOWAIT/cpuUseage.png)\n\n# 3. 问题解决\n## 3.1 查因\n### 3.1.1 定位哪个进程引起的IOWAIT\n- 安装iotop命令\n```\nyum install iotop\n```\n- 使用iotop查看IO状态\n![IOTOP](/images/IOWAIT/IOTOP.png)\n\n### 3.1.2 关于kswapd0\n- Linux uses kswapd for virtual memory management such that pages that have been recently accessed are kept in memory and less active pages are paged out to disk.\n- 系统每过一定时间就会唤醒kswapd进程，查看内存资源是否紧张，如果不紧张，则继续睡眠。在kswapd中，有2个阀值，pages_hige和pages_low，当空闲内存页的数量低于pages_low的时候，kswapd进程就会扫描内存并且每次释放出32个free pages，直到free page的数量到达pages_high。\n- 也就是说kswapd0是有内存资源不足而唤醒的，它去扫描并释放空闲内存，期间会执行大量的换页操作，极有可能就是此进程造成的IO 100%耗尽。\n\n## 3.2 解决方法\n加1G内存<br>\n![loadAverage0223](/images/IOWAIT/loadAverage0223.png)\n\n# 4.参考文章\n- [Troubleshooting High I/O Wait in Linux](http://bencane.com/2012/08/06/troubleshooting-high-io-wait-in-linux/)\n- [quan：Exadata计算节点由kswapd0进程引起的IO使用率100%，内存不足的故障处理](http://blog.itpub.net/22878696/viewspace-1805953/)\n","slug":"IOWAIT导致系统负载过高故障排除","published":1,"updated":"2017-02-24T07:36:46.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizl2e33u0003rcct5q2yfukn","content":"<h1 id=\"1-系统环境\"><a href=\"#1-系统环境\" class=\"headerlink\" title=\"1. 系统环境\"></a>1. 系统环境</h1><ul>\n<li>CentOs 6.5</li>\n<li>1核1GB内存</li>\n</ul>\n<h1 id=\"2-问题描述\"><a href=\"#2-问题描述\" class=\"headerlink\" title=\"2. 问题描述\"></a>2. 问题描述</h1><p>系统负载频繁告警<br><br><img src=\"/images/IOWAIT/loadAverage.png\" alt=\"loadAverage0218\"><br><img src=\"/images/IOWAIT/cpuUseage.png\" alt=\"cpuUseage0218\"></p>\n<h1 id=\"3-问题解决\"><a href=\"#3-问题解决\" class=\"headerlink\" title=\"3. 问题解决\"></a>3. 问题解决</h1><h2 id=\"3-1-查因\"><a href=\"#3-1-查因\" class=\"headerlink\" title=\"3.1 查因\"></a>3.1 查因</h2><h3 id=\"3-1-1-定位哪个进程引起的IOWAIT\"><a href=\"#3-1-1-定位哪个进程引起的IOWAIT\" class=\"headerlink\" title=\"3.1.1 定位哪个进程引起的IOWAIT\"></a>3.1.1 定位哪个进程引起的IOWAIT</h3><ul>\n<li><p>安装iotop命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install iotop</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用iotop查看IO状态<br><img src=\"/images/IOWAIT/IOTOP.png\" alt=\"IOTOP\"></p>\n</li>\n</ul>\n<h3 id=\"3-1-2-关于kswapd0\"><a href=\"#3-1-2-关于kswapd0\" class=\"headerlink\" title=\"3.1.2 关于kswapd0\"></a>3.1.2 关于kswapd0</h3><ul>\n<li>Linux uses kswapd for virtual memory management such that pages that have been recently accessed are kept in memory and less active pages are paged out to disk.</li>\n<li>系统每过一定时间就会唤醒kswapd进程，查看内存资源是否紧张，如果不紧张，则继续睡眠。在kswapd中，有2个阀值，pages_hige和pages_low，当空闲内存页的数量低于pages_low的时候，kswapd进程就会扫描内存并且每次释放出32个free pages，直到free page的数量到达pages_high。</li>\n<li>也就是说kswapd0是有内存资源不足而唤醒的，它去扫描并释放空闲内存，期间会执行大量的换页操作，极有可能就是此进程造成的IO 100%耗尽。</li>\n</ul>\n<h2 id=\"3-2-解决方法\"><a href=\"#3-2-解决方法\" class=\"headerlink\" title=\"3.2 解决方法\"></a>3.2 解决方法</h2><p>加1G内存<br><br><img src=\"/images/IOWAIT/loadAverage0223.png\" alt=\"loadAverage0223\"></p>\n<h1 id=\"4-参考文章\"><a href=\"#4-参考文章\" class=\"headerlink\" title=\"4.参考文章\"></a>4.参考文章</h1><ul>\n<li><a href=\"http://bencane.com/2012/08/06/troubleshooting-high-io-wait-in-linux/\" target=\"_blank\" rel=\"external\">Troubleshooting High I/O Wait in Linux</a></li>\n<li><a href=\"http://blog.itpub.net/22878696/viewspace-1805953/\" target=\"_blank\" rel=\"external\">quan：Exadata计算节点由kswapd0进程引起的IO使用率100%，内存不足的故障处理</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"1-系统环境\"><a href=\"#1-系统环境\" class=\"headerlink\" title=\"1. 系统环境\"></a>1. 系统环境</h1><ul>\n<li>CentOs 6.5</li>\n<li>1核1GB内存</li>\n</ul>\n<h1 id=\"2-问题描述\"><a href=\"#2-问题描述\" class=\"headerlink\" title=\"2. 问题描述\"></a>2. 问题描述</h1><p>系统负载频繁告警<br><br><img src=\"/images/IOWAIT/loadAverage.png\" alt=\"loadAverage0218\"><br><img src=\"/images/IOWAIT/cpuUseage.png\" alt=\"cpuUseage0218\"></p>\n<h1 id=\"3-问题解决\"><a href=\"#3-问题解决\" class=\"headerlink\" title=\"3. 问题解决\"></a>3. 问题解决</h1><h2 id=\"3-1-查因\"><a href=\"#3-1-查因\" class=\"headerlink\" title=\"3.1 查因\"></a>3.1 查因</h2><h3 id=\"3-1-1-定位哪个进程引起的IOWAIT\"><a href=\"#3-1-1-定位哪个进程引起的IOWAIT\" class=\"headerlink\" title=\"3.1.1 定位哪个进程引起的IOWAIT\"></a>3.1.1 定位哪个进程引起的IOWAIT</h3><ul>\n<li><p>安装iotop命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install iotop</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用iotop查看IO状态<br><img src=\"/images/IOWAIT/IOTOP.png\" alt=\"IOTOP\"></p>\n</li>\n</ul>\n<h3 id=\"3-1-2-关于kswapd0\"><a href=\"#3-1-2-关于kswapd0\" class=\"headerlink\" title=\"3.1.2 关于kswapd0\"></a>3.1.2 关于kswapd0</h3><ul>\n<li>Linux uses kswapd for virtual memory management such that pages that have been recently accessed are kept in memory and less active pages are paged out to disk.</li>\n<li>系统每过一定时间就会唤醒kswapd进程，查看内存资源是否紧张，如果不紧张，则继续睡眠。在kswapd中，有2个阀值，pages_hige和pages_low，当空闲内存页的数量低于pages_low的时候，kswapd进程就会扫描内存并且每次释放出32个free pages，直到free page的数量到达pages_high。</li>\n<li>也就是说kswapd0是有内存资源不足而唤醒的，它去扫描并释放空闲内存，期间会执行大量的换页操作，极有可能就是此进程造成的IO 100%耗尽。</li>\n</ul>\n<h2 id=\"3-2-解决方法\"><a href=\"#3-2-解决方法\" class=\"headerlink\" title=\"3.2 解决方法\"></a>3.2 解决方法</h2><p>加1G内存<br><br><img src=\"/images/IOWAIT/loadAverage0223.png\" alt=\"loadAverage0223\"></p>\n<h1 id=\"4-参考文章\"><a href=\"#4-参考文章\" class=\"headerlink\" title=\"4.参考文章\"></a>4.参考文章</h1><ul>\n<li><a href=\"http://bencane.com/2012/08/06/troubleshooting-high-io-wait-in-linux/\">Troubleshooting High I/O Wait in Linux</a></li>\n<li><a href=\"http://blog.itpub.net/22878696/viewspace-1805953/\">quan：Exadata计算节点由kswapd0进程引起的IO使用率100%，内存不足的故障处理</a></li>\n</ul>\n"},{"title":"Zookeeper+ActiveMQ+Paho高可用消息推送","date":"2016-12-16T16:00:00.000Z","_content":"\n# 1. 背景\n线上环境，用来取代免费版极光推送。。\n# 2. 主要参考资料\n我是勤劳的代码搬运工。感谢前人栽树！\n- [ActiveMQ的简单使用](http://wosyingjun.iteye.com/blog/2314681)\n- [ActiveMQ高可用集群方案](http://wosyingjun.iteye.com/blog/2314683)\n- [ZooKeeper高可用集群的安装及配置](http://wosyingjun.iteye.com/blog/2312960)\n- [使用 IBM MessageSight 和 MQTT 客户端应用程序实现高可用性](http://www.ibm.com/developerworks/cn/websphere/library/techarticles/1406_bakowski/1406_bakowski.html?ca=drs-&utm_source=tuicool&utm_medium=referral)\n\n# 3. 集群环境搭建\nZookeeper和ActiveMQ的安装配置步骤应君大人的文章讲解得很详细，只记录下自己的配置内容\n## 3.1 线上环境\n- 阿里云ECS服务器3台\n- 服务器都预装[微柳网络V1.5镜像](https://market.aliyun.com/products/55528001/jxsc000238.html?spm=5176.ecsPrepay.image.selectFromMarketplace.52usUH)环境\n\n<!--more-->\n## 3.2 我的Zookeeper集群配置\n### 3.2.1 节点1的zoo.cgf\n```\n# The number of milliseconds of each tick\ntickTime=2000\n\n# The number of ticks that the initial\n# synchronization phase can take\ninitLimit=10\n\n# The number of ticks that can pass between\n# sending a request and getting an acknowledgement\nsyncLimit=5\n\n# the directory where the snapshot is stored.\n# do not use /tmp for storage, /tmp here is just\n# example sakes.\n#dataDir=/usr/local/zookeeper/zookeeper-1/data\n#dataLogDir=/usr/local/zookeeper/zookeeper-1/logs\ndataDir=/tmp/zookeeper\n\n# the port at which the clients will connect\nclientPort=2181\n\nserver.1=0.0.0.0:2881:38811\nserver.2=120.77.***.***:2882:38822\nserver.3=120.77.***.***:2883:38833\n```\n### 3.2.2 节点2的zoo.cgf\n主体与节点1相同\n```\nserver.1=120.77.***.***:2881:38811\nserver.2=0.0.0.0:2882:38822\nserver.3=120.77.***.***:2883:38833\n```\n### 3.2.3 节点3的zoo.cgf\n主体与节点1相同\n```\nserver.1=120.77.***.***:2881:38811\nserver.2=120.77.***.***:2882:38822\nserver.3=0.0.0.0:2883:38833\n```\n## 3.3 我的ActiveMQ集群配置\n### 3.3.1 各节点activemq.xml的broker配置\n以下是节点1的配置，节点2、3的配置与1一致，只是把replicatedLevelDB的hostname属性值改为各自本机ip：\n```\n<persistenceAdapter>\n<!--\n    <kahaDB directory=\"${activemq.data}/kahadb\"/>\n    directory=\"activemq-data\"\n-->\n    <replicatedLevelDB\n         # The directory which the store will use to hold it's data files.\n         # The store will create the directory if it does not already exist.\n         directory=\"${activemq.data}/leveldb\"\n\n         # The number of nodes that will exist in the cluster.\n         # At least (replicas/2)+1 nodes must be online to avoid service outage.\n         replicas=\"3\"\n\n         # When this node becomes a master,\n         # it will bind the configured address and port to service the replication protocol.\n         bind=\"tcp://0.0.0.0:62621\"\n\n         # A comma separated list of ZooKeeper servers.\n         zkAddress=\"120.77.***.***:2181,120.77.***.***:2182,120.77.***.***:2183\"\n\n         # The path to the ZooKeeper directory where Master/Slave election information will be exchanged.\n         zkPath=\"/activemq/leveldb-stores\"\n\n         # The host name used to advertise the replication service when this node becomes the master.\n         # If not set it will be automatically determined.\n         # 本机ip\n         hostname=\"120.77.***.***\"/>\n</persistenceAdapter>\n<!-- username and password for connecting -->\n<plugins>  \n    <simpleAuthenticationPlugin>  \n        <users>  \n            <authenticationUser username=\"user1\" password=\"user1\" groups=\"users,admins\"/>  \n        </users>  \n    </simpleAuthenticationPlugin>  \n</plugins>\n```\n\n### 3.3.2 更改各节点控制台登陆密码\n更改conf下jetty-realm.properties\n```\n# Defines users that can access the web (console, demo, etc.)\n# username: password [,rolename ...]\nadmin: 123456, admin\nuser: 123456, user\n```\n\n# 4. 逻辑实现\n## 4.1 我的server端代码\n## 4.2 我的client端代码\n# 5. 幺蛾子\n各种各样幺蛾子满天飞。\n\n## 5.1 Zookeeper集群搭建\n重点配置只有下面几行，可是，各种错误。。。\n```\ndataDir=/tmp/zookeeper\nclientPort=2181\nserver.1=0.0.0.0:2881:38811\nserver.2=120.77.***.***:2882:38822\nserver.3=120.77.***.***:2883:38833\n```\n### 5.1.1说明\n在服务器上搭建完成后，想在本地虚拟机上重现错误，按应君大人的搭建步骤，结果一次通过。\n## 5.2 ActiveMQ集群搭建\n## 5.3 Server端代码\n## 5.4 Client端代码\n","source":"_posts/Zookeeper+ActiveMQ+Paho搭建高可用消息推送.md","raw":"---\ntitle: Zookeeper+ActiveMQ+Paho高可用消息推送\ncategory:\n- 消息中间件\ndate: 2016/12/17\n---\n\n# 1. 背景\n线上环境，用来取代免费版极光推送。。\n# 2. 主要参考资料\n我是勤劳的代码搬运工。感谢前人栽树！\n- [ActiveMQ的简单使用](http://wosyingjun.iteye.com/blog/2314681)\n- [ActiveMQ高可用集群方案](http://wosyingjun.iteye.com/blog/2314683)\n- [ZooKeeper高可用集群的安装及配置](http://wosyingjun.iteye.com/blog/2312960)\n- [使用 IBM MessageSight 和 MQTT 客户端应用程序实现高可用性](http://www.ibm.com/developerworks/cn/websphere/library/techarticles/1406_bakowski/1406_bakowski.html?ca=drs-&utm_source=tuicool&utm_medium=referral)\n\n# 3. 集群环境搭建\nZookeeper和ActiveMQ的安装配置步骤应君大人的文章讲解得很详细，只记录下自己的配置内容\n## 3.1 线上环境\n- 阿里云ECS服务器3台\n- 服务器都预装[微柳网络V1.5镜像](https://market.aliyun.com/products/55528001/jxsc000238.html?spm=5176.ecsPrepay.image.selectFromMarketplace.52usUH)环境\n\n<!--more-->\n## 3.2 我的Zookeeper集群配置\n### 3.2.1 节点1的zoo.cgf\n```\n# The number of milliseconds of each tick\ntickTime=2000\n\n# The number of ticks that the initial\n# synchronization phase can take\ninitLimit=10\n\n# The number of ticks that can pass between\n# sending a request and getting an acknowledgement\nsyncLimit=5\n\n# the directory where the snapshot is stored.\n# do not use /tmp for storage, /tmp here is just\n# example sakes.\n#dataDir=/usr/local/zookeeper/zookeeper-1/data\n#dataLogDir=/usr/local/zookeeper/zookeeper-1/logs\ndataDir=/tmp/zookeeper\n\n# the port at which the clients will connect\nclientPort=2181\n\nserver.1=0.0.0.0:2881:38811\nserver.2=120.77.***.***:2882:38822\nserver.3=120.77.***.***:2883:38833\n```\n### 3.2.2 节点2的zoo.cgf\n主体与节点1相同\n```\nserver.1=120.77.***.***:2881:38811\nserver.2=0.0.0.0:2882:38822\nserver.3=120.77.***.***:2883:38833\n```\n### 3.2.3 节点3的zoo.cgf\n主体与节点1相同\n```\nserver.1=120.77.***.***:2881:38811\nserver.2=120.77.***.***:2882:38822\nserver.3=0.0.0.0:2883:38833\n```\n## 3.3 我的ActiveMQ集群配置\n### 3.3.1 各节点activemq.xml的broker配置\n以下是节点1的配置，节点2、3的配置与1一致，只是把replicatedLevelDB的hostname属性值改为各自本机ip：\n```\n<persistenceAdapter>\n<!--\n    <kahaDB directory=\"${activemq.data}/kahadb\"/>\n    directory=\"activemq-data\"\n-->\n    <replicatedLevelDB\n         # The directory which the store will use to hold it's data files.\n         # The store will create the directory if it does not already exist.\n         directory=\"${activemq.data}/leveldb\"\n\n         # The number of nodes that will exist in the cluster.\n         # At least (replicas/2)+1 nodes must be online to avoid service outage.\n         replicas=\"3\"\n\n         # When this node becomes a master,\n         # it will bind the configured address and port to service the replication protocol.\n         bind=\"tcp://0.0.0.0:62621\"\n\n         # A comma separated list of ZooKeeper servers.\n         zkAddress=\"120.77.***.***:2181,120.77.***.***:2182,120.77.***.***:2183\"\n\n         # The path to the ZooKeeper directory where Master/Slave election information will be exchanged.\n         zkPath=\"/activemq/leveldb-stores\"\n\n         # The host name used to advertise the replication service when this node becomes the master.\n         # If not set it will be automatically determined.\n         # 本机ip\n         hostname=\"120.77.***.***\"/>\n</persistenceAdapter>\n<!-- username and password for connecting -->\n<plugins>  \n    <simpleAuthenticationPlugin>  \n        <users>  \n            <authenticationUser username=\"user1\" password=\"user1\" groups=\"users,admins\"/>  \n        </users>  \n    </simpleAuthenticationPlugin>  \n</plugins>\n```\n\n### 3.3.2 更改各节点控制台登陆密码\n更改conf下jetty-realm.properties\n```\n# Defines users that can access the web (console, demo, etc.)\n# username: password [,rolename ...]\nadmin: 123456, admin\nuser: 123456, user\n```\n\n# 4. 逻辑实现\n## 4.1 我的server端代码\n## 4.2 我的client端代码\n# 5. 幺蛾子\n各种各样幺蛾子满天飞。\n\n## 5.1 Zookeeper集群搭建\n重点配置只有下面几行，可是，各种错误。。。\n```\ndataDir=/tmp/zookeeper\nclientPort=2181\nserver.1=0.0.0.0:2881:38811\nserver.2=120.77.***.***:2882:38822\nserver.3=120.77.***.***:2883:38833\n```\n### 5.1.1说明\n在服务器上搭建完成后，想在本地虚拟机上重现错误，按应君大人的搭建步骤，结果一次通过。\n## 5.2 ActiveMQ集群搭建\n## 5.3 Server端代码\n## 5.4 Client端代码\n","slug":"Zookeeper+ActiveMQ+Paho搭建高可用消息推送","published":1,"updated":"2017-02-24T07:34:28.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizl2e33v0004rcctgnigvrrx","content":"<h1 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1. 背景\"></a>1. 背景</h1><p>线上环境，用来取代免费版极光推送。。</p>\n<h1 id=\"2-主要参考资料\"><a href=\"#2-主要参考资料\" class=\"headerlink\" title=\"2. 主要参考资料\"></a>2. 主要参考资料</h1><p>我是勤劳的代码搬运工。感谢前人栽树！</p>\n<ul>\n<li><a href=\"http://wosyingjun.iteye.com/blog/2314681\" target=\"_blank\" rel=\"external\">ActiveMQ的简单使用</a></li>\n<li><a href=\"http://wosyingjun.iteye.com/blog/2314683\" target=\"_blank\" rel=\"external\">ActiveMQ高可用集群方案</a></li>\n<li><a href=\"http://wosyingjun.iteye.com/blog/2312960\" target=\"_blank\" rel=\"external\">ZooKeeper高可用集群的安装及配置</a></li>\n<li><a href=\"http://www.ibm.com/developerworks/cn/websphere/library/techarticles/1406_bakowski/1406_bakowski.html?ca=drs-&amp;utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"external\">使用 IBM MessageSight 和 MQTT 客户端应用程序实现高可用性</a></li>\n</ul>\n<h1 id=\"3-集群环境搭建\"><a href=\"#3-集群环境搭建\" class=\"headerlink\" title=\"3. 集群环境搭建\"></a>3. 集群环境搭建</h1><p>Zookeeper和ActiveMQ的安装配置步骤应君大人的文章讲解得很详细，只记录下自己的配置内容</p>\n<h2 id=\"3-1-线上环境\"><a href=\"#3-1-线上环境\" class=\"headerlink\" title=\"3.1 线上环境\"></a>3.1 线上环境</h2><ul>\n<li>阿里云ECS服务器3台</li>\n<li>服务器都预装<a href=\"https://market.aliyun.com/products/55528001/jxsc000238.html?spm=5176.ecsPrepay.image.selectFromMarketplace.52usUH\" target=\"_blank\" rel=\"external\">微柳网络V1.5镜像</a>环境</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"3-2-我的Zookeeper集群配置\"><a href=\"#3-2-我的Zookeeper集群配置\" class=\"headerlink\" title=\"3.2 我的Zookeeper集群配置\"></a>3.2 我的Zookeeper集群配置</h2><h3 id=\"3-2-1-节点1的zoo-cgf\"><a href=\"#3-2-1-节点1的zoo-cgf\" class=\"headerlink\" title=\"3.2.1 节点1的zoo.cgf\"></a>3.2.1 节点1的zoo.cgf</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"># The number of milliseconds of each tick</div><div class=\"line\">tickTime=2000</div><div class=\"line\"></div><div class=\"line\"># The number of ticks that the initial</div><div class=\"line\"># synchronization phase can take</div><div class=\"line\">initLimit=10</div><div class=\"line\"></div><div class=\"line\"># The number of ticks that can pass between</div><div class=\"line\"># sending a request and getting an acknowledgement</div><div class=\"line\">syncLimit=5</div><div class=\"line\"></div><div class=\"line\"># the directory where the snapshot is stored.</div><div class=\"line\"># do not use /tmp for storage, /tmp here is just</div><div class=\"line\"># example sakes.</div><div class=\"line\">#dataDir=/usr/local/zookeeper/zookeeper-1/data</div><div class=\"line\">#dataLogDir=/usr/local/zookeeper/zookeeper-1/logs</div><div class=\"line\">dataDir=/tmp/zookeeper</div><div class=\"line\"></div><div class=\"line\"># the port at which the clients will connect</div><div class=\"line\">clientPort=2181</div><div class=\"line\"></div><div class=\"line\">server.1=0.0.0.0:2881:38811</div><div class=\"line\">server.2=120.77.***.***:2882:38822</div><div class=\"line\">server.3=120.77.***.***:2883:38833</div></pre></td></tr></table></figure>\n<h3 id=\"3-2-2-节点2的zoo-cgf\"><a href=\"#3-2-2-节点2的zoo-cgf\" class=\"headerlink\" title=\"3.2.2 节点2的zoo.cgf\"></a>3.2.2 节点2的zoo.cgf</h3><p>主体与节点1相同<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">server.1=120.77.***.***:2881:38811</div><div class=\"line\">server.2=0.0.0.0:2882:38822</div><div class=\"line\">server.3=120.77.***.***:2883:38833</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-2-3-节点3的zoo-cgf\"><a href=\"#3-2-3-节点3的zoo-cgf\" class=\"headerlink\" title=\"3.2.3 节点3的zoo.cgf\"></a>3.2.3 节点3的zoo.cgf</h3><p>主体与节点1相同<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">server.1=120.77.***.***:2881:38811</div><div class=\"line\">server.2=120.77.***.***:2882:38822</div><div class=\"line\">server.3=0.0.0.0:2883:38833</div></pre></td></tr></table></figure></p>\n<h2 id=\"3-3-我的ActiveMQ集群配置\"><a href=\"#3-3-我的ActiveMQ集群配置\" class=\"headerlink\" title=\"3.3 我的ActiveMQ集群配置\"></a>3.3 我的ActiveMQ集群配置</h2><h3 id=\"3-3-1-各节点activemq-xml的broker配置\"><a href=\"#3-3-1-各节点activemq-xml的broker配置\" class=\"headerlink\" title=\"3.3.1 各节点activemq.xml的broker配置\"></a>3.3.1 各节点activemq.xml的broker配置</h3><p>以下是节点1的配置，节点2、3的配置与1一致，只是把replicatedLevelDB的hostname属性值改为各自本机ip：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;persistenceAdapter&gt;</div><div class=\"line\">&lt;!--</div><div class=\"line\">    &lt;kahaDB directory=&quot;$&#123;activemq.data&#125;/kahadb&quot;/&gt;</div><div class=\"line\">    directory=&quot;activemq-data&quot;</div><div class=\"line\">--&gt;</div><div class=\"line\">    &lt;replicatedLevelDB</div><div class=\"line\">         # The directory which the store will use to hold it&apos;s data files.</div><div class=\"line\">         # The store will create the directory if it does not already exist.</div><div class=\"line\">         directory=&quot;$&#123;activemq.data&#125;/leveldb&quot;</div><div class=\"line\"></div><div class=\"line\">         # The number of nodes that will exist in the cluster.</div><div class=\"line\">         # At least (replicas/2)+1 nodes must be online to avoid service outage.</div><div class=\"line\">         replicas=&quot;3&quot;</div><div class=\"line\"></div><div class=\"line\">         # When this node becomes a master,</div><div class=\"line\">         # it will bind the configured address and port to service the replication protocol.</div><div class=\"line\">         bind=&quot;tcp://0.0.0.0:62621&quot;</div><div class=\"line\"></div><div class=\"line\">         # A comma separated list of ZooKeeper servers.</div><div class=\"line\">         zkAddress=&quot;120.77.***.***:2181,120.77.***.***:2182,120.77.***.***:2183&quot;</div><div class=\"line\"></div><div class=\"line\">         # The path to the ZooKeeper directory where Master/Slave election information will be exchanged.</div><div class=\"line\">         zkPath=&quot;/activemq/leveldb-stores&quot;</div><div class=\"line\"></div><div class=\"line\">         # The host name used to advertise the replication service when this node becomes the master.</div><div class=\"line\">         # If not set it will be automatically determined.</div><div class=\"line\">         # 本机ip</div><div class=\"line\">         hostname=&quot;120.77.***.***&quot;/&gt;</div><div class=\"line\">&lt;/persistenceAdapter&gt;</div><div class=\"line\">&lt;!-- username and password for connecting --&gt;</div><div class=\"line\">&lt;plugins&gt;  </div><div class=\"line\">    &lt;simpleAuthenticationPlugin&gt;  </div><div class=\"line\">        &lt;users&gt;  </div><div class=\"line\">            &lt;authenticationUser username=&quot;user1&quot; password=&quot;user1&quot; groups=&quot;users,admins&quot;/&gt;  </div><div class=\"line\">        &lt;/users&gt;  </div><div class=\"line\">    &lt;/simpleAuthenticationPlugin&gt;  </div><div class=\"line\">&lt;/plugins&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-3-2-更改各节点控制台登陆密码\"><a href=\"#3-3-2-更改各节点控制台登陆密码\" class=\"headerlink\" title=\"3.3.2 更改各节点控制台登陆密码\"></a>3.3.2 更改各节点控制台登陆密码</h3><p>更改conf下jetty-realm.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Defines users that can access the web (console, demo, etc.)</div><div class=\"line\"># username: password [,rolename ...]</div><div class=\"line\">admin: 123456, admin</div><div class=\"line\">user: 123456, user</div></pre></td></tr></table></figure></p>\n<h1 id=\"4-逻辑实现\"><a href=\"#4-逻辑实现\" class=\"headerlink\" title=\"4. 逻辑实现\"></a>4. 逻辑实现</h1><h2 id=\"4-1-我的server端代码\"><a href=\"#4-1-我的server端代码\" class=\"headerlink\" title=\"4.1 我的server端代码\"></a>4.1 我的server端代码</h2><h2 id=\"4-2-我的client端代码\"><a href=\"#4-2-我的client端代码\" class=\"headerlink\" title=\"4.2 我的client端代码\"></a>4.2 我的client端代码</h2><h1 id=\"5-幺蛾子\"><a href=\"#5-幺蛾子\" class=\"headerlink\" title=\"5. 幺蛾子\"></a>5. 幺蛾子</h1><p>各种各样幺蛾子满天飞。</p>\n<h2 id=\"5-1-Zookeeper集群搭建\"><a href=\"#5-1-Zookeeper集群搭建\" class=\"headerlink\" title=\"5.1 Zookeeper集群搭建\"></a>5.1 Zookeeper集群搭建</h2><p>重点配置只有下面几行，可是，各种错误。。。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">dataDir=/tmp/zookeeper</div><div class=\"line\">clientPort=2181</div><div class=\"line\">server.1=0.0.0.0:2881:38811</div><div class=\"line\">server.2=120.77.***.***:2882:38822</div><div class=\"line\">server.3=120.77.***.***:2883:38833</div></pre></td></tr></table></figure></p>\n<h3 id=\"5-1-1说明\"><a href=\"#5-1-1说明\" class=\"headerlink\" title=\"5.1.1说明\"></a>5.1.1说明</h3><p>在服务器上搭建完成后，想在本地虚拟机上重现错误，按应君大人的搭建步骤，结果一次通过。</p>\n<h2 id=\"5-2-ActiveMQ集群搭建\"><a href=\"#5-2-ActiveMQ集群搭建\" class=\"headerlink\" title=\"5.2 ActiveMQ集群搭建\"></a>5.2 ActiveMQ集群搭建</h2><h2 id=\"5-3-Server端代码\"><a href=\"#5-3-Server端代码\" class=\"headerlink\" title=\"5.3 Server端代码\"></a>5.3 Server端代码</h2><h2 id=\"5-4-Client端代码\"><a href=\"#5-4-Client端代码\" class=\"headerlink\" title=\"5.4 Client端代码\"></a>5.4 Client端代码</h2>","excerpt":"<h1 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1. 背景\"></a>1. 背景</h1><p>线上环境，用来取代免费版极光推送。。</p>\n<h1 id=\"2-主要参考资料\"><a href=\"#2-主要参考资料\" class=\"headerlink\" title=\"2. 主要参考资料\"></a>2. 主要参考资料</h1><p>我是勤劳的代码搬运工。感谢前人栽树！</p>\n<ul>\n<li><a href=\"http://wosyingjun.iteye.com/blog/2314681\">ActiveMQ的简单使用</a></li>\n<li><a href=\"http://wosyingjun.iteye.com/blog/2314683\">ActiveMQ高可用集群方案</a></li>\n<li><a href=\"http://wosyingjun.iteye.com/blog/2312960\">ZooKeeper高可用集群的安装及配置</a></li>\n<li><a href=\"http://www.ibm.com/developerworks/cn/websphere/library/techarticles/1406_bakowski/1406_bakowski.html?ca=drs-&amp;utm_source=tuicool&amp;utm_medium=referral\">使用 IBM MessageSight 和 MQTT 客户端应用程序实现高可用性</a></li>\n</ul>\n<h1 id=\"3-集群环境搭建\"><a href=\"#3-集群环境搭建\" class=\"headerlink\" title=\"3. 集群环境搭建\"></a>3. 集群环境搭建</h1><p>Zookeeper和ActiveMQ的安装配置步骤应君大人的文章讲解得很详细，只记录下自己的配置内容</p>\n<h2 id=\"3-1-线上环境\"><a href=\"#3-1-线上环境\" class=\"headerlink\" title=\"3.1 线上环境\"></a>3.1 线上环境</h2><ul>\n<li>阿里云ECS服务器3台</li>\n<li>服务器都预装<a href=\"https://market.aliyun.com/products/55528001/jxsc000238.html?spm=5176.ecsPrepay.image.selectFromMarketplace.52usUH\">微柳网络V1.5镜像</a>环境</li>\n</ul>","more":"<h2 id=\"3-2-我的Zookeeper集群配置\"><a href=\"#3-2-我的Zookeeper集群配置\" class=\"headerlink\" title=\"3.2 我的Zookeeper集群配置\"></a>3.2 我的Zookeeper集群配置</h2><h3 id=\"3-2-1-节点1的zoo-cgf\"><a href=\"#3-2-1-节点1的zoo-cgf\" class=\"headerlink\" title=\"3.2.1 节点1的zoo.cgf\"></a>3.2.1 节点1的zoo.cgf</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"># The number of milliseconds of each tick</div><div class=\"line\">tickTime=2000</div><div class=\"line\"></div><div class=\"line\"># The number of ticks that the initial</div><div class=\"line\"># synchronization phase can take</div><div class=\"line\">initLimit=10</div><div class=\"line\"></div><div class=\"line\"># The number of ticks that can pass between</div><div class=\"line\"># sending a request and getting an acknowledgement</div><div class=\"line\">syncLimit=5</div><div class=\"line\"></div><div class=\"line\"># the directory where the snapshot is stored.</div><div class=\"line\"># do not use /tmp for storage, /tmp here is just</div><div class=\"line\"># example sakes.</div><div class=\"line\">#dataDir=/usr/local/zookeeper/zookeeper-1/data</div><div class=\"line\">#dataLogDir=/usr/local/zookeeper/zookeeper-1/logs</div><div class=\"line\">dataDir=/tmp/zookeeper</div><div class=\"line\"></div><div class=\"line\"># the port at which the clients will connect</div><div class=\"line\">clientPort=2181</div><div class=\"line\"></div><div class=\"line\">server.1=0.0.0.0:2881:38811</div><div class=\"line\">server.2=120.77.***.***:2882:38822</div><div class=\"line\">server.3=120.77.***.***:2883:38833</div></pre></td></tr></table></figure>\n<h3 id=\"3-2-2-节点2的zoo-cgf\"><a href=\"#3-2-2-节点2的zoo-cgf\" class=\"headerlink\" title=\"3.2.2 节点2的zoo.cgf\"></a>3.2.2 节点2的zoo.cgf</h3><p>主体与节点1相同<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">server.1=120.77.***.***:2881:38811</div><div class=\"line\">server.2=0.0.0.0:2882:38822</div><div class=\"line\">server.3=120.77.***.***:2883:38833</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-2-3-节点3的zoo-cgf\"><a href=\"#3-2-3-节点3的zoo-cgf\" class=\"headerlink\" title=\"3.2.3 节点3的zoo.cgf\"></a>3.2.3 节点3的zoo.cgf</h3><p>主体与节点1相同<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">server.1=120.77.***.***:2881:38811</div><div class=\"line\">server.2=120.77.***.***:2882:38822</div><div class=\"line\">server.3=0.0.0.0:2883:38833</div></pre></td></tr></table></figure></p>\n<h2 id=\"3-3-我的ActiveMQ集群配置\"><a href=\"#3-3-我的ActiveMQ集群配置\" class=\"headerlink\" title=\"3.3 我的ActiveMQ集群配置\"></a>3.3 我的ActiveMQ集群配置</h2><h3 id=\"3-3-1-各节点activemq-xml的broker配置\"><a href=\"#3-3-1-各节点activemq-xml的broker配置\" class=\"headerlink\" title=\"3.3.1 各节点activemq.xml的broker配置\"></a>3.3.1 各节点activemq.xml的broker配置</h3><p>以下是节点1的配置，节点2、3的配置与1一致，只是把replicatedLevelDB的hostname属性值改为各自本机ip：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;persistenceAdapter&gt;</div><div class=\"line\">&lt;!--</div><div class=\"line\">    &lt;kahaDB directory=&quot;$&#123;activemq.data&#125;/kahadb&quot;/&gt;</div><div class=\"line\">    directory=&quot;activemq-data&quot;</div><div class=\"line\">--&gt;</div><div class=\"line\">    &lt;replicatedLevelDB</div><div class=\"line\">         # The directory which the store will use to hold it&apos;s data files.</div><div class=\"line\">         # The store will create the directory if it does not already exist.</div><div class=\"line\">         directory=&quot;$&#123;activemq.data&#125;/leveldb&quot;</div><div class=\"line\"></div><div class=\"line\">         # The number of nodes that will exist in the cluster.</div><div class=\"line\">         # At least (replicas/2)+1 nodes must be online to avoid service outage.</div><div class=\"line\">         replicas=&quot;3&quot;</div><div class=\"line\"></div><div class=\"line\">         # When this node becomes a master,</div><div class=\"line\">         # it will bind the configured address and port to service the replication protocol.</div><div class=\"line\">         bind=&quot;tcp://0.0.0.0:62621&quot;</div><div class=\"line\"></div><div class=\"line\">         # A comma separated list of ZooKeeper servers.</div><div class=\"line\">         zkAddress=&quot;120.77.***.***:2181,120.77.***.***:2182,120.77.***.***:2183&quot;</div><div class=\"line\"></div><div class=\"line\">         # The path to the ZooKeeper directory where Master/Slave election information will be exchanged.</div><div class=\"line\">         zkPath=&quot;/activemq/leveldb-stores&quot;</div><div class=\"line\"></div><div class=\"line\">         # The host name used to advertise the replication service when this node becomes the master.</div><div class=\"line\">         # If not set it will be automatically determined.</div><div class=\"line\">         # 本机ip</div><div class=\"line\">         hostname=&quot;120.77.***.***&quot;/&gt;</div><div class=\"line\">&lt;/persistenceAdapter&gt;</div><div class=\"line\">&lt;!-- username and password for connecting --&gt;</div><div class=\"line\">&lt;plugins&gt;  </div><div class=\"line\">    &lt;simpleAuthenticationPlugin&gt;  </div><div class=\"line\">        &lt;users&gt;  </div><div class=\"line\">            &lt;authenticationUser username=&quot;user1&quot; password=&quot;user1&quot; groups=&quot;users,admins&quot;/&gt;  </div><div class=\"line\">        &lt;/users&gt;  </div><div class=\"line\">    &lt;/simpleAuthenticationPlugin&gt;  </div><div class=\"line\">&lt;/plugins&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-3-2-更改各节点控制台登陆密码\"><a href=\"#3-3-2-更改各节点控制台登陆密码\" class=\"headerlink\" title=\"3.3.2 更改各节点控制台登陆密码\"></a>3.3.2 更改各节点控制台登陆密码</h3><p>更改conf下jetty-realm.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Defines users that can access the web (console, demo, etc.)</div><div class=\"line\"># username: password [,rolename ...]</div><div class=\"line\">admin: 123456, admin</div><div class=\"line\">user: 123456, user</div></pre></td></tr></table></figure></p>\n<h1 id=\"4-逻辑实现\"><a href=\"#4-逻辑实现\" class=\"headerlink\" title=\"4. 逻辑实现\"></a>4. 逻辑实现</h1><h2 id=\"4-1-我的server端代码\"><a href=\"#4-1-我的server端代码\" class=\"headerlink\" title=\"4.1 我的server端代码\"></a>4.1 我的server端代码</h2><h2 id=\"4-2-我的client端代码\"><a href=\"#4-2-我的client端代码\" class=\"headerlink\" title=\"4.2 我的client端代码\"></a>4.2 我的client端代码</h2><h1 id=\"5-幺蛾子\"><a href=\"#5-幺蛾子\" class=\"headerlink\" title=\"5. 幺蛾子\"></a>5. 幺蛾子</h1><p>各种各样幺蛾子满天飞。</p>\n<h2 id=\"5-1-Zookeeper集群搭建\"><a href=\"#5-1-Zookeeper集群搭建\" class=\"headerlink\" title=\"5.1 Zookeeper集群搭建\"></a>5.1 Zookeeper集群搭建</h2><p>重点配置只有下面几行，可是，各种错误。。。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">dataDir=/tmp/zookeeper</div><div class=\"line\">clientPort=2181</div><div class=\"line\">server.1=0.0.0.0:2881:38811</div><div class=\"line\">server.2=120.77.***.***:2882:38822</div><div class=\"line\">server.3=120.77.***.***:2883:38833</div></pre></td></tr></table></figure></p>\n<h3 id=\"5-1-1说明\"><a href=\"#5-1-1说明\" class=\"headerlink\" title=\"5.1.1说明\"></a>5.1.1说明</h3><p>在服务器上搭建完成后，想在本地虚拟机上重现错误，按应君大人的搭建步骤，结果一次通过。</p>\n<h2 id=\"5-2-ActiveMQ集群搭建\"><a href=\"#5-2-ActiveMQ集群搭建\" class=\"headerlink\" title=\"5.2 ActiveMQ集群搭建\"></a>5.2 ActiveMQ集群搭建</h2><h2 id=\"5-3-Server端代码\"><a href=\"#5-3-Server端代码\" class=\"headerlink\" title=\"5.3 Server端代码\"></a>5.3 Server端代码</h2><h2 id=\"5-4-Client端代码\"><a href=\"#5-4-Client端代码\" class=\"headerlink\" title=\"5.4 Client端代码\"></a>5.4 Client端代码</h2>"},{"title":"书单--2016","date":"2016-10-15T16:00:00.000Z","_content":"# 深入分析Java Web技术内幕\n- 作者：许令波\n- 出版社：电子工业出版社\n- 状态：已完成\n\n# 大型网站技术架构 核心原理与案例分析\n- 作者：李智慧\n- 出版社：电子工业出版社; 第1版\n- 状态：已完成\n\n# JavaEE开发的颠覆者: Spring Boot实战\n- 作者：汪云飞\n- 出版社：电子工业出版社; 第1版\n- 状态：已完成\n\n# Java多线程编程核心技术\n- 作者：高洪岩\n- 出版社：机械工业出版社; 第1版\n- 状态：已完成\n\n# 深入理解Java虚拟机：JVM高级特性与最佳实践\n- 作者：周志明\n- 出版社：机械工业出版社; 第2版\n- 状态：已完成\n\n# Effective Java\n- 作者：Joshua Bloch\n- 出版社：机械工业出版社; 第2版\n- 状态：正在进行时\n\n# Head First设计模式\n- 作者：J弗里曼\n- 出版社：中国电力出版社\n- 状态：正在进行时\n","source":"_posts/书单--2016.md","raw":"---\ntitle: 书单--2016\ncategory: \"reading notes\"\ndate: 2016/10/16\n---\n# 深入分析Java Web技术内幕\n- 作者：许令波\n- 出版社：电子工业出版社\n- 状态：已完成\n\n# 大型网站技术架构 核心原理与案例分析\n- 作者：李智慧\n- 出版社：电子工业出版社; 第1版\n- 状态：已完成\n\n# JavaEE开发的颠覆者: Spring Boot实战\n- 作者：汪云飞\n- 出版社：电子工业出版社; 第1版\n- 状态：已完成\n\n# Java多线程编程核心技术\n- 作者：高洪岩\n- 出版社：机械工业出版社; 第1版\n- 状态：已完成\n\n# 深入理解Java虚拟机：JVM高级特性与最佳实践\n- 作者：周志明\n- 出版社：机械工业出版社; 第2版\n- 状态：已完成\n\n# Effective Java\n- 作者：Joshua Bloch\n- 出版社：机械工业出版社; 第2版\n- 状态：正在进行时\n\n# Head First设计模式\n- 作者：J弗里曼\n- 出版社：中国电力出版社\n- 状态：正在进行时\n","slug":"书单--2016","published":1,"updated":"2017-02-24T07:34:28.461Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizl2e3410005rcctqf6rk3a6","content":"<h1 id=\"深入分析Java-Web技术内幕\"><a href=\"#深入分析Java-Web技术内幕\" class=\"headerlink\" title=\"深入分析Java Web技术内幕\"></a>深入分析Java Web技术内幕</h1><ul>\n<li>作者：许令波</li>\n<li>出版社：电子工业出版社</li>\n<li>状态：已完成</li>\n</ul>\n<h1 id=\"大型网站技术架构-核心原理与案例分析\"><a href=\"#大型网站技术架构-核心原理与案例分析\" class=\"headerlink\" title=\"大型网站技术架构 核心原理与案例分析\"></a>大型网站技术架构 核心原理与案例分析</h1><ul>\n<li>作者：李智慧</li>\n<li>出版社：电子工业出版社; 第1版</li>\n<li>状态：已完成</li>\n</ul>\n<h1 id=\"JavaEE开发的颠覆者-Spring-Boot实战\"><a href=\"#JavaEE开发的颠覆者-Spring-Boot实战\" class=\"headerlink\" title=\"JavaEE开发的颠覆者: Spring Boot实战\"></a>JavaEE开发的颠覆者: Spring Boot实战</h1><ul>\n<li>作者：汪云飞</li>\n<li>出版社：电子工业出版社; 第1版</li>\n<li>状态：已完成</li>\n</ul>\n<h1 id=\"Java多线程编程核心技术\"><a href=\"#Java多线程编程核心技术\" class=\"headerlink\" title=\"Java多线程编程核心技术\"></a>Java多线程编程核心技术</h1><ul>\n<li>作者：高洪岩</li>\n<li>出版社：机械工业出版社; 第1版</li>\n<li>状态：已完成</li>\n</ul>\n<h1 id=\"深入理解Java虚拟机：JVM高级特性与最佳实践\"><a href=\"#深入理解Java虚拟机：JVM高级特性与最佳实践\" class=\"headerlink\" title=\"深入理解Java虚拟机：JVM高级特性与最佳实践\"></a>深入理解Java虚拟机：JVM高级特性与最佳实践</h1><ul>\n<li>作者：周志明</li>\n<li>出版社：机械工业出版社; 第2版</li>\n<li>状态：已完成</li>\n</ul>\n<h1 id=\"Effective-Java\"><a href=\"#Effective-Java\" class=\"headerlink\" title=\"Effective Java\"></a>Effective Java</h1><ul>\n<li>作者：Joshua Bloch</li>\n<li>出版社：机械工业出版社; 第2版</li>\n<li>状态：正在进行时</li>\n</ul>\n<h1 id=\"Head-First设计模式\"><a href=\"#Head-First设计模式\" class=\"headerlink\" title=\"Head First设计模式\"></a>Head First设计模式</h1><ul>\n<li>作者：J弗里曼</li>\n<li>出版社：中国电力出版社</li>\n<li>状态：正在进行时</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"深入分析Java-Web技术内幕\"><a href=\"#深入分析Java-Web技术内幕\" class=\"headerlink\" title=\"深入分析Java Web技术内幕\"></a>深入分析Java Web技术内幕</h1><ul>\n<li>作者：许令波</li>\n<li>出版社：电子工业出版社</li>\n<li>状态：已完成</li>\n</ul>\n<h1 id=\"大型网站技术架构-核心原理与案例分析\"><a href=\"#大型网站技术架构-核心原理与案例分析\" class=\"headerlink\" title=\"大型网站技术架构 核心原理与案例分析\"></a>大型网站技术架构 核心原理与案例分析</h1><ul>\n<li>作者：李智慧</li>\n<li>出版社：电子工业出版社; 第1版</li>\n<li>状态：已完成</li>\n</ul>\n<h1 id=\"JavaEE开发的颠覆者-Spring-Boot实战\"><a href=\"#JavaEE开发的颠覆者-Spring-Boot实战\" class=\"headerlink\" title=\"JavaEE开发的颠覆者: Spring Boot实战\"></a>JavaEE开发的颠覆者: Spring Boot实战</h1><ul>\n<li>作者：汪云飞</li>\n<li>出版社：电子工业出版社; 第1版</li>\n<li>状态：已完成</li>\n</ul>\n<h1 id=\"Java多线程编程核心技术\"><a href=\"#Java多线程编程核心技术\" class=\"headerlink\" title=\"Java多线程编程核心技术\"></a>Java多线程编程核心技术</h1><ul>\n<li>作者：高洪岩</li>\n<li>出版社：机械工业出版社; 第1版</li>\n<li>状态：已完成</li>\n</ul>\n<h1 id=\"深入理解Java虚拟机：JVM高级特性与最佳实践\"><a href=\"#深入理解Java虚拟机：JVM高级特性与最佳实践\" class=\"headerlink\" title=\"深入理解Java虚拟机：JVM高级特性与最佳实践\"></a>深入理解Java虚拟机：JVM高级特性与最佳实践</h1><ul>\n<li>作者：周志明</li>\n<li>出版社：机械工业出版社; 第2版</li>\n<li>状态：已完成</li>\n</ul>\n<h1 id=\"Effective-Java\"><a href=\"#Effective-Java\" class=\"headerlink\" title=\"Effective Java\"></a>Effective Java</h1><ul>\n<li>作者：Joshua Bloch</li>\n<li>出版社：机械工业出版社; 第2版</li>\n<li>状态：正在进行时</li>\n</ul>\n<h1 id=\"Head-First设计模式\"><a href=\"#Head-First设计模式\" class=\"headerlink\" title=\"Head First设计模式\"></a>Head First设计模式</h1><ul>\n<li>作者：J弗里曼</li>\n<li>出版社：中国电力出版社</li>\n<li>状态：正在进行时</li>\n</ul>\n"},{"title":"Java Multi-thread Programming","date":"2016-10-15T16:00:00.000Z","update":"2016/10/31","_content":"\n# 写在前面\n书名：Java 多线程编程核心技术\n作者：高洪岩\n\n第一次阅读周期：2016-10-16 至 2016-10-31\n代码地址：[JavaMulti-threadProgramming](https://github.com/oomeD/ReadingNotes/tree/master/JavaMulti-threadProgramming)\n\n<!--more-->\n\n# 第一章 java多线程技能\n- 进程是受操作系统管理的基本运行单元\n- 线程是在进程中独立运行的子任务\n- 使用多线程也就是在使用异步\n- 一个进程在运行时至少有一个线程在运行\n- 线程是一个子任务，CPU以不确定的方式，或者说是以随机的时间来调用线程中的run方法\n- 自定义线程类中的实例变量，对其他线程可以有**共享**和**不共享**之分。共享数据可能出现非线程安全问题（数据同步问题）\n- currentThread()返回代码块正被哪个线程调用的信息\n- isAlive()方法，当线程进入准备好状态之后和run代码块在被执行完之前返回true(处于准备开始运行和正在运行的状态)\n- sleep()方法，让当前正在执行的线程休眠。这个“正在执行的线程”是指this.currentThread()返回的线程\n- yield()方法，放弃当前的CPU资源，让给其他任务去占用CPU执行时间\n- java中线程分为两种：一种是用户线程，一种是守护线程（Daemon）。当进程中没有非守护线程了，刚守护线程自动销毁。典型的就是垃圾回收线程\n\n# 第二章 对象及变量的并发访问\n- “非线程安全”问题存在于“实例变量”中，如果是方法内部的私有变量，则不存在“非线程安全”问题。\n- 关键字synchronized获取的是锁都是对象锁。只有是同一个对象，才能实现同步。如果是不同的对象，则会有多个不同的对象锁，锁住的也是各自不同的对象 ，也就不能实现同步。\n- 脏读一定是出现在操作实例变量的情况下，这就是不同纯种“争抢”实例变量的结果。\n- synchronized锁重入，当线程拿到一个类的锁后，在synchronied方法/块里调用本类的其他synchroized方法/块时，永远可以得到锁。不可重入的话就会造成死锁\n- 可重入锁也支持在父子继承的环境中，子类完成可以通过可重入锁机制调用父类的同步方法。\n- Class锁可以对类的所有对象实例起作用\n- volatile关键字的作用是强制从**公共堆栈**中取得变量的值，而不是从线程**私有数据栈**中取得变量的值\n- 使用volatile增加了实例变量在多个线程之间的可见性。但其最致命的缺点是不支持原子性\n- 线程的安全包含原子性（同步性）和可见性两方面，java的同步机制都是围绕这两个方面来确保线程安全的\n- 下图演示了volatile出现非线程安全的原因：</br>![变量在内存中的工作过程](/images/multithread/变量在内存中的工作过程.png)\n - read和load阶段：从主内存复制变量到当前线程工作内存;\n - use和assign阶段：执行代码，改变共享变量值\n - store和write阶段：用工作内存数据刷新主内存对应变量的值\n\n > 对于用volatile修饰的变量，JVM虚拟机只是保证从主内在加载到线程工作内在中的值是最新的，</br>例如线程1和线程2在进行read和load的操作中，发现主内存中count值都是5，那么都会加载这个最新值。\n\n\n- ~~只要类中有synchronized方法和代码块，不管synchronized的对象是不是本类，这个类的实例变量就都是可见性的？~~ </br>synchronized可以保证进入同步方法或代码块的每个线程，能看到在锁保护之前，所有的修改效果。\n\n# 第三章 线程间的通信\n- 方法wait()的作用是使当前执行代码的线程进行等待。wait()方法是Object类的方法，该方法用来将当前线程置入“预执行队列”中，并在wait()所在的代码行处停止执行，直到接到通知或被中断为止。\n- 在调用wait()方法之前，线程必须获得该对象的对象级别锁，即只能在同步方法或同步块中调用wait()方法，在执行wait方法后，当前线程释放锁。\n- 方法notify()也要在同步方法或同步块是调用，即在调用前，线程也必须获得该对象的对象级别锁。\n- notify()方法用来通知那些可能等待该对象的对象锁的其他线程，如果存在多个线程等待，则由线程规划器随机挑选其中一个呈wait状态的线程，对其发出通知notify，并使他等待获取该对象的对象锁。\n- 在执行notify()方法后，当前线程不会马上释放该对象锁，呈wait状态的线程也不能马上获取该对象锁，要等到执行notify()方法的线程将程序执行完，当前线程才会释放锁，呈wait状态的线程才可以获取该对象锁。\n- wait线程运行完毕之后，它会释放掉该对象锁，此时如果该对象没有再次使用notify语句，则即便该对象已经空闲，其他wait状态等待的线程由于没有得到对象的通知，还会继续阻塞在wait状态，直到这个对象发出一个notify或notifyAll.\n- wait()方法可以使调用该方法的线程释放共享资源的锁，然后从运行状态退出，进入等待队列，直到被再次唤醒。\n- notify()方法可以随便唤醒等待队列中等待同一共享资源的“一个”线程，并使该线程退出等待队列，进入可运行状态，也就是notify()方法仅通知“一个”线程。\n- notifyAll()方法可以使所在正在等待队列中等待同一共享资源的“全部”线程从等待状态退出，进入可运行状态。此时，优先级最高的那个线程最先执行，但也有可能是随机执行，这取决于JVM虚拟机的实现。\n- 每个锁对象都有两个队列，一个是就绪队列，一个是阻塞队列。就绪队列存储了将要获得锁的线程，阻塞队列存储了被阻塞的线程。一个线程被唤醒后，才会进入就绪队列，等待CPU的调度；反之，一个线程被wait、sleep、suspend等后，就会进入阻塞队列，等待下一次被唤醒。\n- 线程状态转换示意图如下：</br>![线程状态切换](/images/multithread/线程状态切换.jpg)\n - 新创建一个线程对象后，再调用它的start()方法，系统会为此线程分配CPU资源，使其处于Runnable（可运行）状态，这是一个准备运行的阶段。如果线程抢到CPU资源，就处于Running（运行）状态。\n - Runnable和Running状态可相互切换，因为有可能线程运行一段时间后，在其他高优先级的线程抢占了CPU资源，这时此线程就从Running状态变成Runnable状态。\n  > 线程进入Runnable状态大体分为如下5种情况：\n  > 1. 调用sleep()方法后经过的时间超过了指定的休眠时间；\n  > 2. 线程调用的阻塞IO已经返回，阻塞方法执行完毕；\n  > 3. 线程成功地获得了试图同步的监视器；\n  > 4. 线程正在等待某个通知，其他线程发出了通知；\n  > 5. 处于挂起状态的线程调用了一个resume恢复方法。\n\n - Blocked是阻塞的意思，例如遇到一个阻塞IO操作，此时CPU处于空闲状态，可能会转而把CPU时间片分配给其他线程，这时也可以称为“暂时”状态。Blocked状态结束后，进入Runnabe状态，等待系统重新分配资源。\n  > 出现阻塞的情况大体分为以下5种：\n  > 1. 线程调用sleep方法，主动放弃占用的CPU资源；\n  > 2. 线程调用了阻塞式IO方法，在该方法返回前，该线程被阻塞；\n  > 3. 线程试图获得一个同步监视器，但该同步监视器正在被其他线程所持有；\n  > 4. 线程等待某个通知；\n  > 5. 程序调用了suspend方法将该线程挂起。\n\n - run()方法运行结束后进入销毁阶段，整个线程执行完毕。\n\n- wait(long)方法的功能是等待某一时间内是否有线程对锁进行唤醒，如果超过这个时间则自动唤醒。\n- 管道流（pipeStream）用于在不同间直接传送数据。通过使用管道流，不须借助于类似临时文件之类的东西--PipedInputStream和PipedOutputStream、PipedReader和PipedWriter\n- inputStream.connect(outputStream)或outputStream.connect(inputStream)使两个Stream之间产生通信链接。\n- 如果读取线程启动后，没有数据被写入，那么线程会被阻塞在in.read(byteArray)代码中，直到有数据被写入，才会继续运行。\n- 如果主线程想等待子线程执行完成之后再结束，就要用join()方法。join()方法的作用是等待线程对象销毁。\n- join()方法具有使线程排队运行的作用，有些类似同步运行的效果。join与synchronized的区别是：join在内部使用wait()方法进行等待，而synchronized关键字使用的是是“对象监视器”原理做为同步\n- 主线程A在等待子线程B销毁时（调用了B.join()），如果等待过程中A被打断，A会抛出异常，但异常与B无关，B会继续运行至结束。\n- join(time)调用的是wait(time)，所以join(time)会释放线程对象锁，在wait的时间消逝完后，重新竞争对象锁，拿到锁后再又又以把join(time)方法执行完\n- ThreadLocal类：每个线程绑定自己的值\n\n# 第四章 Lock的使用\n- ReentrantReadWriteLock类，读写锁表示有两个锁，一个是读操作相关的锁，也称共享锁；另一个是写操作相关的锁，也叫排他锁。也就是多个读锁之间不互斥，读锁与写锁互斥，写锁与写锁互斥。\n- ReentrantReadWriteLock类，“读写”、“写读”和“写写”都是互斥的；而“读读”是异步的，非互斥的。\n\n# 第六章  单例模式与多线程\n- 实例单例模式的方法有：立即加载（饿汉）模式、延迟加载（懒汉）模式、静态内部类模式、静态代码块模式、枚举模式\n- 有效解决延迟加载（懒汉模式）下单例模式的非线程安全问题是使用DCL（double-check locking）双检查机制\n ``` java\n     public class MyObject {\n\n        private volatile static MyObject myObject;\n\n        private MyObject() {\n        }\n\n        // 使用双检测机制来解决问题\n        // 即保证了不需要同步代码的异步\n        // 又保证了单例的效果\n        public static MyObject getInstance() {\n            try {\n                if (myObject != null) {\n                } else {\n                    // 模拟在创建对象之前做一些准备性的工作\n                    Thread.sleep(3000);\n                    synchronized (MyObject.class) {\n                        if (myObject == null) {\n                            myObject = new MyObject();\n                        }\n                    }\n                }\n            } catch (InterruptedException e) {  \n                e.printStackTrace();\n            }\n            return myObject;\n        }\n        // 此版本的代码称为：\n        // 双重检查Double-Check Locking\n\n     }\n\n  ```\n\n- 在单例反序列化时，解决反序列化得到的对象是一个新对象，而不是原来的实例的问题：\n ```java\n  \tprotected Object readResolve() throws ObjectStreamException {\n  \t\tSystem.out.println(\"调用了readResolve方法！\");\n  \t\treturn MyObjectHandler.myObject;\n  \t}\n ```\n\n# 第七章 拾遗增补\n- 线程组，一级关联：父对象中有子对象，但并不创建子孙对象。多级关联：父对象中有子对象，子对象中再创建子对象，也就出现子孙对象的效果。\n","source":"_posts/multiThread.md","raw":"---\ntitle: Java Multi-thread Programming\ncategory: \"reading notes\"\ndate: 2016/10/16\nupdate: 2016/10/31\n---\n\n# 写在前面\n书名：Java 多线程编程核心技术\n作者：高洪岩\n\n第一次阅读周期：2016-10-16 至 2016-10-31\n代码地址：[JavaMulti-threadProgramming](https://github.com/oomeD/ReadingNotes/tree/master/JavaMulti-threadProgramming)\n\n<!--more-->\n\n# 第一章 java多线程技能\n- 进程是受操作系统管理的基本运行单元\n- 线程是在进程中独立运行的子任务\n- 使用多线程也就是在使用异步\n- 一个进程在运行时至少有一个线程在运行\n- 线程是一个子任务，CPU以不确定的方式，或者说是以随机的时间来调用线程中的run方法\n- 自定义线程类中的实例变量，对其他线程可以有**共享**和**不共享**之分。共享数据可能出现非线程安全问题（数据同步问题）\n- currentThread()返回代码块正被哪个线程调用的信息\n- isAlive()方法，当线程进入准备好状态之后和run代码块在被执行完之前返回true(处于准备开始运行和正在运行的状态)\n- sleep()方法，让当前正在执行的线程休眠。这个“正在执行的线程”是指this.currentThread()返回的线程\n- yield()方法，放弃当前的CPU资源，让给其他任务去占用CPU执行时间\n- java中线程分为两种：一种是用户线程，一种是守护线程（Daemon）。当进程中没有非守护线程了，刚守护线程自动销毁。典型的就是垃圾回收线程\n\n# 第二章 对象及变量的并发访问\n- “非线程安全”问题存在于“实例变量”中，如果是方法内部的私有变量，则不存在“非线程安全”问题。\n- 关键字synchronized获取的是锁都是对象锁。只有是同一个对象，才能实现同步。如果是不同的对象，则会有多个不同的对象锁，锁住的也是各自不同的对象 ，也就不能实现同步。\n- 脏读一定是出现在操作实例变量的情况下，这就是不同纯种“争抢”实例变量的结果。\n- synchronized锁重入，当线程拿到一个类的锁后，在synchronied方法/块里调用本类的其他synchroized方法/块时，永远可以得到锁。不可重入的话就会造成死锁\n- 可重入锁也支持在父子继承的环境中，子类完成可以通过可重入锁机制调用父类的同步方法。\n- Class锁可以对类的所有对象实例起作用\n- volatile关键字的作用是强制从**公共堆栈**中取得变量的值，而不是从线程**私有数据栈**中取得变量的值\n- 使用volatile增加了实例变量在多个线程之间的可见性。但其最致命的缺点是不支持原子性\n- 线程的安全包含原子性（同步性）和可见性两方面，java的同步机制都是围绕这两个方面来确保线程安全的\n- 下图演示了volatile出现非线程安全的原因：</br>![变量在内存中的工作过程](/images/multithread/变量在内存中的工作过程.png)\n - read和load阶段：从主内存复制变量到当前线程工作内存;\n - use和assign阶段：执行代码，改变共享变量值\n - store和write阶段：用工作内存数据刷新主内存对应变量的值\n\n > 对于用volatile修饰的变量，JVM虚拟机只是保证从主内在加载到线程工作内在中的值是最新的，</br>例如线程1和线程2在进行read和load的操作中，发现主内存中count值都是5，那么都会加载这个最新值。\n\n\n- ~~只要类中有synchronized方法和代码块，不管synchronized的对象是不是本类，这个类的实例变量就都是可见性的？~~ </br>synchronized可以保证进入同步方法或代码块的每个线程，能看到在锁保护之前，所有的修改效果。\n\n# 第三章 线程间的通信\n- 方法wait()的作用是使当前执行代码的线程进行等待。wait()方法是Object类的方法，该方法用来将当前线程置入“预执行队列”中，并在wait()所在的代码行处停止执行，直到接到通知或被中断为止。\n- 在调用wait()方法之前，线程必须获得该对象的对象级别锁，即只能在同步方法或同步块中调用wait()方法，在执行wait方法后，当前线程释放锁。\n- 方法notify()也要在同步方法或同步块是调用，即在调用前，线程也必须获得该对象的对象级别锁。\n- notify()方法用来通知那些可能等待该对象的对象锁的其他线程，如果存在多个线程等待，则由线程规划器随机挑选其中一个呈wait状态的线程，对其发出通知notify，并使他等待获取该对象的对象锁。\n- 在执行notify()方法后，当前线程不会马上释放该对象锁，呈wait状态的线程也不能马上获取该对象锁，要等到执行notify()方法的线程将程序执行完，当前线程才会释放锁，呈wait状态的线程才可以获取该对象锁。\n- wait线程运行完毕之后，它会释放掉该对象锁，此时如果该对象没有再次使用notify语句，则即便该对象已经空闲，其他wait状态等待的线程由于没有得到对象的通知，还会继续阻塞在wait状态，直到这个对象发出一个notify或notifyAll.\n- wait()方法可以使调用该方法的线程释放共享资源的锁，然后从运行状态退出，进入等待队列，直到被再次唤醒。\n- notify()方法可以随便唤醒等待队列中等待同一共享资源的“一个”线程，并使该线程退出等待队列，进入可运行状态，也就是notify()方法仅通知“一个”线程。\n- notifyAll()方法可以使所在正在等待队列中等待同一共享资源的“全部”线程从等待状态退出，进入可运行状态。此时，优先级最高的那个线程最先执行，但也有可能是随机执行，这取决于JVM虚拟机的实现。\n- 每个锁对象都有两个队列，一个是就绪队列，一个是阻塞队列。就绪队列存储了将要获得锁的线程，阻塞队列存储了被阻塞的线程。一个线程被唤醒后，才会进入就绪队列，等待CPU的调度；反之，一个线程被wait、sleep、suspend等后，就会进入阻塞队列，等待下一次被唤醒。\n- 线程状态转换示意图如下：</br>![线程状态切换](/images/multithread/线程状态切换.jpg)\n - 新创建一个线程对象后，再调用它的start()方法，系统会为此线程分配CPU资源，使其处于Runnable（可运行）状态，这是一个准备运行的阶段。如果线程抢到CPU资源，就处于Running（运行）状态。\n - Runnable和Running状态可相互切换，因为有可能线程运行一段时间后，在其他高优先级的线程抢占了CPU资源，这时此线程就从Running状态变成Runnable状态。\n  > 线程进入Runnable状态大体分为如下5种情况：\n  > 1. 调用sleep()方法后经过的时间超过了指定的休眠时间；\n  > 2. 线程调用的阻塞IO已经返回，阻塞方法执行完毕；\n  > 3. 线程成功地获得了试图同步的监视器；\n  > 4. 线程正在等待某个通知，其他线程发出了通知；\n  > 5. 处于挂起状态的线程调用了一个resume恢复方法。\n\n - Blocked是阻塞的意思，例如遇到一个阻塞IO操作，此时CPU处于空闲状态，可能会转而把CPU时间片分配给其他线程，这时也可以称为“暂时”状态。Blocked状态结束后，进入Runnabe状态，等待系统重新分配资源。\n  > 出现阻塞的情况大体分为以下5种：\n  > 1. 线程调用sleep方法，主动放弃占用的CPU资源；\n  > 2. 线程调用了阻塞式IO方法，在该方法返回前，该线程被阻塞；\n  > 3. 线程试图获得一个同步监视器，但该同步监视器正在被其他线程所持有；\n  > 4. 线程等待某个通知；\n  > 5. 程序调用了suspend方法将该线程挂起。\n\n - run()方法运行结束后进入销毁阶段，整个线程执行完毕。\n\n- wait(long)方法的功能是等待某一时间内是否有线程对锁进行唤醒，如果超过这个时间则自动唤醒。\n- 管道流（pipeStream）用于在不同间直接传送数据。通过使用管道流，不须借助于类似临时文件之类的东西--PipedInputStream和PipedOutputStream、PipedReader和PipedWriter\n- inputStream.connect(outputStream)或outputStream.connect(inputStream)使两个Stream之间产生通信链接。\n- 如果读取线程启动后，没有数据被写入，那么线程会被阻塞在in.read(byteArray)代码中，直到有数据被写入，才会继续运行。\n- 如果主线程想等待子线程执行完成之后再结束，就要用join()方法。join()方法的作用是等待线程对象销毁。\n- join()方法具有使线程排队运行的作用，有些类似同步运行的效果。join与synchronized的区别是：join在内部使用wait()方法进行等待，而synchronized关键字使用的是是“对象监视器”原理做为同步\n- 主线程A在等待子线程B销毁时（调用了B.join()），如果等待过程中A被打断，A会抛出异常，但异常与B无关，B会继续运行至结束。\n- join(time)调用的是wait(time)，所以join(time)会释放线程对象锁，在wait的时间消逝完后，重新竞争对象锁，拿到锁后再又又以把join(time)方法执行完\n- ThreadLocal类：每个线程绑定自己的值\n\n# 第四章 Lock的使用\n- ReentrantReadWriteLock类，读写锁表示有两个锁，一个是读操作相关的锁，也称共享锁；另一个是写操作相关的锁，也叫排他锁。也就是多个读锁之间不互斥，读锁与写锁互斥，写锁与写锁互斥。\n- ReentrantReadWriteLock类，“读写”、“写读”和“写写”都是互斥的；而“读读”是异步的，非互斥的。\n\n# 第六章  单例模式与多线程\n- 实例单例模式的方法有：立即加载（饿汉）模式、延迟加载（懒汉）模式、静态内部类模式、静态代码块模式、枚举模式\n- 有效解决延迟加载（懒汉模式）下单例模式的非线程安全问题是使用DCL（double-check locking）双检查机制\n ``` java\n     public class MyObject {\n\n        private volatile static MyObject myObject;\n\n        private MyObject() {\n        }\n\n        // 使用双检测机制来解决问题\n        // 即保证了不需要同步代码的异步\n        // 又保证了单例的效果\n        public static MyObject getInstance() {\n            try {\n                if (myObject != null) {\n                } else {\n                    // 模拟在创建对象之前做一些准备性的工作\n                    Thread.sleep(3000);\n                    synchronized (MyObject.class) {\n                        if (myObject == null) {\n                            myObject = new MyObject();\n                        }\n                    }\n                }\n            } catch (InterruptedException e) {  \n                e.printStackTrace();\n            }\n            return myObject;\n        }\n        // 此版本的代码称为：\n        // 双重检查Double-Check Locking\n\n     }\n\n  ```\n\n- 在单例反序列化时，解决反序列化得到的对象是一个新对象，而不是原来的实例的问题：\n ```java\n  \tprotected Object readResolve() throws ObjectStreamException {\n  \t\tSystem.out.println(\"调用了readResolve方法！\");\n  \t\treturn MyObjectHandler.myObject;\n  \t}\n ```\n\n# 第七章 拾遗增补\n- 线程组，一级关联：父对象中有子对象，但并不创建子孙对象。多级关联：父对象中有子对象，子对象中再创建子对象，也就出现子孙对象的效果。\n","slug":"multiThread","published":1,"updated":"2017-02-24T07:34:28.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizl2e3430007rcctxxkpo7n4","content":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>书名：Java 多线程编程核心技术<br>作者：高洪岩</p>\n<p>第一次阅读周期：2016-10-16 至 2016-10-31<br>代码地址：<a href=\"https://github.com/oomeD/ReadingNotes/tree/master/JavaMulti-threadProgramming\" target=\"_blank\" rel=\"external\">JavaMulti-threadProgramming</a></p>\n<a id=\"more\"></a>\n<h1 id=\"第一章-java多线程技能\"><a href=\"#第一章-java多线程技能\" class=\"headerlink\" title=\"第一章 java多线程技能\"></a>第一章 java多线程技能</h1><ul>\n<li>进程是受操作系统管理的基本运行单元</li>\n<li>线程是在进程中独立运行的子任务</li>\n<li>使用多线程也就是在使用异步</li>\n<li>一个进程在运行时至少有一个线程在运行</li>\n<li>线程是一个子任务，CPU以不确定的方式，或者说是以随机的时间来调用线程中的run方法</li>\n<li>自定义线程类中的实例变量，对其他线程可以有<strong>共享</strong>和<strong>不共享</strong>之分。共享数据可能出现非线程安全问题（数据同步问题）</li>\n<li>currentThread()返回代码块正被哪个线程调用的信息</li>\n<li>isAlive()方法，当线程进入准备好状态之后和run代码块在被执行完之前返回true(处于准备开始运行和正在运行的状态)</li>\n<li>sleep()方法，让当前正在执行的线程休眠。这个“正在执行的线程”是指this.currentThread()返回的线程</li>\n<li>yield()方法，放弃当前的CPU资源，让给其他任务去占用CPU执行时间</li>\n<li>java中线程分为两种：一种是用户线程，一种是守护线程（Daemon）。当进程中没有非守护线程了，刚守护线程自动销毁。典型的就是垃圾回收线程</li>\n</ul>\n<h1 id=\"第二章-对象及变量的并发访问\"><a href=\"#第二章-对象及变量的并发访问\" class=\"headerlink\" title=\"第二章 对象及变量的并发访问\"></a>第二章 对象及变量的并发访问</h1><ul>\n<li>“非线程安全”问题存在于“实例变量”中，如果是方法内部的私有变量，则不存在“非线程安全”问题。</li>\n<li>关键字synchronized获取的是锁都是对象锁。只有是同一个对象，才能实现同步。如果是不同的对象，则会有多个不同的对象锁，锁住的也是各自不同的对象 ，也就不能实现同步。</li>\n<li>脏读一定是出现在操作实例变量的情况下，这就是不同纯种“争抢”实例变量的结果。</li>\n<li>synchronized锁重入，当线程拿到一个类的锁后，在synchronied方法/块里调用本类的其他synchroized方法/块时，永远可以得到锁。不可重入的话就会造成死锁</li>\n<li>可重入锁也支持在父子继承的环境中，子类完成可以通过可重入锁机制调用父类的同步方法。</li>\n<li>Class锁可以对类的所有对象实例起作用</li>\n<li>volatile关键字的作用是强制从<strong>公共堆栈</strong>中取得变量的值，而不是从线程<strong>私有数据栈</strong>中取得变量的值</li>\n<li>使用volatile增加了实例变量在多个线程之间的可见性。但其最致命的缺点是不支持原子性</li>\n<li>线程的安全包含原子性（同步性）和可见性两方面，java的同步机制都是围绕这两个方面来确保线程安全的</li>\n<li><p>下图演示了volatile出现非线程安全的原因：<br><img src=\"/images/multithread/变量在内存中的工作过程.png\" alt=\"变量在内存中的工作过程\"></p>\n<ul>\n<li>read和load阶段：从主内存复制变量到当前线程工作内存;</li>\n<li>use和assign阶段：执行代码，改变共享变量值</li>\n<li>store和write阶段：用工作内存数据刷新主内存对应变量的值</li>\n</ul>\n<blockquote>\n<p>对于用volatile修饰的变量，JVM虚拟机只是保证从主内在加载到线程工作内在中的值是最新的，<br>例如线程1和线程2在进行read和load的操作中，发现主内存中count值都是5，那么都会加载这个最新值。</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><del>只要类中有synchronized方法和代码块，不管synchronized的对象是不是本类，这个类的实例变量就都是可见性的？</del> <br>synchronized可以保证进入同步方法或代码块的每个线程，能看到在锁保护之前，所有的修改效果。</li>\n</ul>\n<h1 id=\"第三章-线程间的通信\"><a href=\"#第三章-线程间的通信\" class=\"headerlink\" title=\"第三章 线程间的通信\"></a>第三章 线程间的通信</h1><ul>\n<li>方法wait()的作用是使当前执行代码的线程进行等待。wait()方法是Object类的方法，该方法用来将当前线程置入“预执行队列”中，并在wait()所在的代码行处停止执行，直到接到通知或被中断为止。</li>\n<li>在调用wait()方法之前，线程必须获得该对象的对象级别锁，即只能在同步方法或同步块中调用wait()方法，在执行wait方法后，当前线程释放锁。</li>\n<li>方法notify()也要在同步方法或同步块是调用，即在调用前，线程也必须获得该对象的对象级别锁。</li>\n<li>notify()方法用来通知那些可能等待该对象的对象锁的其他线程，如果存在多个线程等待，则由线程规划器随机挑选其中一个呈wait状态的线程，对其发出通知notify，并使他等待获取该对象的对象锁。</li>\n<li>在执行notify()方法后，当前线程不会马上释放该对象锁，呈wait状态的线程也不能马上获取该对象锁，要等到执行notify()方法的线程将程序执行完，当前线程才会释放锁，呈wait状态的线程才可以获取该对象锁。</li>\n<li>wait线程运行完毕之后，它会释放掉该对象锁，此时如果该对象没有再次使用notify语句，则即便该对象已经空闲，其他wait状态等待的线程由于没有得到对象的通知，还会继续阻塞在wait状态，直到这个对象发出一个notify或notifyAll.</li>\n<li>wait()方法可以使调用该方法的线程释放共享资源的锁，然后从运行状态退出，进入等待队列，直到被再次唤醒。</li>\n<li>notify()方法可以随便唤醒等待队列中等待同一共享资源的“一个”线程，并使该线程退出等待队列，进入可运行状态，也就是notify()方法仅通知“一个”线程。</li>\n<li>notifyAll()方法可以使所在正在等待队列中等待同一共享资源的“全部”线程从等待状态退出，进入可运行状态。此时，优先级最高的那个线程最先执行，但也有可能是随机执行，这取决于JVM虚拟机的实现。</li>\n<li>每个锁对象都有两个队列，一个是就绪队列，一个是阻塞队列。就绪队列存储了将要获得锁的线程，阻塞队列存储了被阻塞的线程。一个线程被唤醒后，才会进入就绪队列，等待CPU的调度；反之，一个线程被wait、sleep、suspend等后，就会进入阻塞队列，等待下一次被唤醒。</li>\n<li><p>线程状态转换示意图如下：<br><img src=\"/images/multithread/线程状态切换.jpg\" alt=\"线程状态切换\"></p>\n<ul>\n<li>新创建一个线程对象后，再调用它的start()方法，系统会为此线程分配CPU资源，使其处于Runnable（可运行）状态，这是一个准备运行的阶段。如果线程抢到CPU资源，就处于Running（运行）状态。</li>\n<li><p>Runnable和Running状态可相互切换，因为有可能线程运行一段时间后，在其他高优先级的线程抢占了CPU资源，这时此线程就从Running状态变成Runnable状态。</p>\n<blockquote>\n<p>线程进入Runnable状态大体分为如下5种情况：</p>\n<ol>\n<li>调用sleep()方法后经过的时间超过了指定的休眠时间；</li>\n<li>线程调用的阻塞IO已经返回，阻塞方法执行完毕；</li>\n<li>线程成功地获得了试图同步的监视器；</li>\n<li>线程正在等待某个通知，其他线程发出了通知；</li>\n<li>处于挂起状态的线程调用了一个resume恢复方法。</li>\n</ol>\n</blockquote>\n</li>\n<li><p>Blocked是阻塞的意思，例如遇到一个阻塞IO操作，此时CPU处于空闲状态，可能会转而把CPU时间片分配给其他线程，这时也可以称为“暂时”状态。Blocked状态结束后，进入Runnabe状态，等待系统重新分配资源。</p>\n<blockquote>\n<p>出现阻塞的情况大体分为以下5种：</p>\n<ol>\n<li>线程调用sleep方法，主动放弃占用的CPU资源；</li>\n<li>线程调用了阻塞式IO方法，在该方法返回前，该线程被阻塞；</li>\n<li>线程试图获得一个同步监视器，但该同步监视器正在被其他线程所持有；</li>\n<li>线程等待某个通知；</li>\n<li>程序调用了suspend方法将该线程挂起。</li>\n</ol>\n</blockquote>\n</li>\n<li><p>run()方法运行结束后进入销毁阶段，整个线程执行完毕。</p>\n</li>\n</ul>\n</li>\n<li><p>wait(long)方法的功能是等待某一时间内是否有线程对锁进行唤醒，如果超过这个时间则自动唤醒。</p>\n</li>\n<li>管道流（pipeStream）用于在不同间直接传送数据。通过使用管道流，不须借助于类似临时文件之类的东西–PipedInputStream和PipedOutputStream、PipedReader和PipedWriter</li>\n<li>inputStream.connect(outputStream)或outputStream.connect(inputStream)使两个Stream之间产生通信链接。</li>\n<li>如果读取线程启动后，没有数据被写入，那么线程会被阻塞在in.read(byteArray)代码中，直到有数据被写入，才会继续运行。</li>\n<li>如果主线程想等待子线程执行完成之后再结束，就要用join()方法。join()方法的作用是等待线程对象销毁。</li>\n<li>join()方法具有使线程排队运行的作用，有些类似同步运行的效果。join与synchronized的区别是：join在内部使用wait()方法进行等待，而synchronized关键字使用的是是“对象监视器”原理做为同步</li>\n<li>主线程A在等待子线程B销毁时（调用了B.join()），如果等待过程中A被打断，A会抛出异常，但异常与B无关，B会继续运行至结束。</li>\n<li>join(time)调用的是wait(time)，所以join(time)会释放线程对象锁，在wait的时间消逝完后，重新竞争对象锁，拿到锁后再又又以把join(time)方法执行完</li>\n<li>ThreadLocal类：每个线程绑定自己的值</li>\n</ul>\n<h1 id=\"第四章-Lock的使用\"><a href=\"#第四章-Lock的使用\" class=\"headerlink\" title=\"第四章 Lock的使用\"></a>第四章 Lock的使用</h1><ul>\n<li>ReentrantReadWriteLock类，读写锁表示有两个锁，一个是读操作相关的锁，也称共享锁；另一个是写操作相关的锁，也叫排他锁。也就是多个读锁之间不互斥，读锁与写锁互斥，写锁与写锁互斥。</li>\n<li>ReentrantReadWriteLock类，“读写”、“写读”和“写写”都是互斥的；而“读读”是异步的，非互斥的。</li>\n</ul>\n<h1 id=\"第六章-单例模式与多线程\"><a href=\"#第六章-单例模式与多线程\" class=\"headerlink\" title=\"第六章  单例模式与多线程\"></a>第六章  单例模式与多线程</h1><ul>\n<li>实例单例模式的方法有：立即加载（饿汉）模式、延迟加载（懒汉）模式、静态内部类模式、静态代码块模式、枚举模式</li>\n<li><p>有效解决延迟加载（懒汉模式）下单例模式的非线程安全问题是使用DCL（double-check locking）双检查机制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyObject</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> MyObject myObject;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">MyObject</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// 使用双检测机制来解决问题</span></div><div class=\"line\">   <span class=\"comment\">// 即保证了不需要同步代码的异步</span></div><div class=\"line\">   <span class=\"comment\">// 又保证了单例的效果</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MyObject <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (myObject != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               <span class=\"comment\">// 模拟在创建对象之前做一些准备性的工作</span></div><div class=\"line\">               Thread.sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">               <span class=\"keyword\">synchronized</span> (MyObject.class) &#123;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (myObject == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                       myObject = <span class=\"keyword\">new</span> MyObject();</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">           e.printStackTrace();</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> myObject;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"comment\">// 此版本的代码称为：</span></div><div class=\"line\">   <span class=\"comment\">// 双重检查Double-Check Locking</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在单例反序列化时，解决反序列化得到的对象是一个新对象，而不是原来的实例的问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">readResolve</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ObjectStreamException </span>&#123;</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"调用了readResolve方法！\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> MyObjectHandler.myObject;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"第七章-拾遗增补\"><a href=\"#第七章-拾遗增补\" class=\"headerlink\" title=\"第七章 拾遗增补\"></a>第七章 拾遗增补</h1><ul>\n<li>线程组，一级关联：父对象中有子对象，但并不创建子孙对象。多级关联：父对象中有子对象，子对象中再创建子对象，也就出现子孙对象的效果。</li>\n</ul>\n","excerpt":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>书名：Java 多线程编程核心技术<br>作者：高洪岩</p>\n<p>第一次阅读周期：2016-10-16 至 2016-10-31<br>代码地址：<a href=\"https://github.com/oomeD/ReadingNotes/tree/master/JavaMulti-threadProgramming\">JavaMulti-threadProgramming</a></p>","more":"<h1 id=\"第一章-java多线程技能\"><a href=\"#第一章-java多线程技能\" class=\"headerlink\" title=\"第一章 java多线程技能\"></a>第一章 java多线程技能</h1><ul>\n<li>进程是受操作系统管理的基本运行单元</li>\n<li>线程是在进程中独立运行的子任务</li>\n<li>使用多线程也就是在使用异步</li>\n<li>一个进程在运行时至少有一个线程在运行</li>\n<li>线程是一个子任务，CPU以不确定的方式，或者说是以随机的时间来调用线程中的run方法</li>\n<li>自定义线程类中的实例变量，对其他线程可以有<strong>共享</strong>和<strong>不共享</strong>之分。共享数据可能出现非线程安全问题（数据同步问题）</li>\n<li>currentThread()返回代码块正被哪个线程调用的信息</li>\n<li>isAlive()方法，当线程进入准备好状态之后和run代码块在被执行完之前返回true(处于准备开始运行和正在运行的状态)</li>\n<li>sleep()方法，让当前正在执行的线程休眠。这个“正在执行的线程”是指this.currentThread()返回的线程</li>\n<li>yield()方法，放弃当前的CPU资源，让给其他任务去占用CPU执行时间</li>\n<li>java中线程分为两种：一种是用户线程，一种是守护线程（Daemon）。当进程中没有非守护线程了，刚守护线程自动销毁。典型的就是垃圾回收线程</li>\n</ul>\n<h1 id=\"第二章-对象及变量的并发访问\"><a href=\"#第二章-对象及变量的并发访问\" class=\"headerlink\" title=\"第二章 对象及变量的并发访问\"></a>第二章 对象及变量的并发访问</h1><ul>\n<li>“非线程安全”问题存在于“实例变量”中，如果是方法内部的私有变量，则不存在“非线程安全”问题。</li>\n<li>关键字synchronized获取的是锁都是对象锁。只有是同一个对象，才能实现同步。如果是不同的对象，则会有多个不同的对象锁，锁住的也是各自不同的对象 ，也就不能实现同步。</li>\n<li>脏读一定是出现在操作实例变量的情况下，这就是不同纯种“争抢”实例变量的结果。</li>\n<li>synchronized锁重入，当线程拿到一个类的锁后，在synchronied方法/块里调用本类的其他synchroized方法/块时，永远可以得到锁。不可重入的话就会造成死锁</li>\n<li>可重入锁也支持在父子继承的环境中，子类完成可以通过可重入锁机制调用父类的同步方法。</li>\n<li>Class锁可以对类的所有对象实例起作用</li>\n<li>volatile关键字的作用是强制从<strong>公共堆栈</strong>中取得变量的值，而不是从线程<strong>私有数据栈</strong>中取得变量的值</li>\n<li>使用volatile增加了实例变量在多个线程之间的可见性。但其最致命的缺点是不支持原子性</li>\n<li>线程的安全包含原子性（同步性）和可见性两方面，java的同步机制都是围绕这两个方面来确保线程安全的</li>\n<li><p>下图演示了volatile出现非线程安全的原因：</br><img src=\"/images/multithread/变量在内存中的工作过程.png\" alt=\"变量在内存中的工作过程\"></p>\n<ul>\n<li>read和load阶段：从主内存复制变量到当前线程工作内存;</li>\n<li>use和assign阶段：执行代码，改变共享变量值</li>\n<li>store和write阶段：用工作内存数据刷新主内存对应变量的值</li>\n</ul>\n<blockquote>\n<p>对于用volatile修饰的变量，JVM虚拟机只是保证从主内在加载到线程工作内在中的值是最新的，</br>例如线程1和线程2在进行read和load的操作中，发现主内存中count值都是5，那么都会加载这个最新值。</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><del>只要类中有synchronized方法和代码块，不管synchronized的对象是不是本类，这个类的实例变量就都是可见性的？</del> </br>synchronized可以保证进入同步方法或代码块的每个线程，能看到在锁保护之前，所有的修改效果。</li>\n</ul>\n<h1 id=\"第三章-线程间的通信\"><a href=\"#第三章-线程间的通信\" class=\"headerlink\" title=\"第三章 线程间的通信\"></a>第三章 线程间的通信</h1><ul>\n<li>方法wait()的作用是使当前执行代码的线程进行等待。wait()方法是Object类的方法，该方法用来将当前线程置入“预执行队列”中，并在wait()所在的代码行处停止执行，直到接到通知或被中断为止。</li>\n<li>在调用wait()方法之前，线程必须获得该对象的对象级别锁，即只能在同步方法或同步块中调用wait()方法，在执行wait方法后，当前线程释放锁。</li>\n<li>方法notify()也要在同步方法或同步块是调用，即在调用前，线程也必须获得该对象的对象级别锁。</li>\n<li>notify()方法用来通知那些可能等待该对象的对象锁的其他线程，如果存在多个线程等待，则由线程规划器随机挑选其中一个呈wait状态的线程，对其发出通知notify，并使他等待获取该对象的对象锁。</li>\n<li>在执行notify()方法后，当前线程不会马上释放该对象锁，呈wait状态的线程也不能马上获取该对象锁，要等到执行notify()方法的线程将程序执行完，当前线程才会释放锁，呈wait状态的线程才可以获取该对象锁。</li>\n<li>wait线程运行完毕之后，它会释放掉该对象锁，此时如果该对象没有再次使用notify语句，则即便该对象已经空闲，其他wait状态等待的线程由于没有得到对象的通知，还会继续阻塞在wait状态，直到这个对象发出一个notify或notifyAll.</li>\n<li>wait()方法可以使调用该方法的线程释放共享资源的锁，然后从运行状态退出，进入等待队列，直到被再次唤醒。</li>\n<li>notify()方法可以随便唤醒等待队列中等待同一共享资源的“一个”线程，并使该线程退出等待队列，进入可运行状态，也就是notify()方法仅通知“一个”线程。</li>\n<li>notifyAll()方法可以使所在正在等待队列中等待同一共享资源的“全部”线程从等待状态退出，进入可运行状态。此时，优先级最高的那个线程最先执行，但也有可能是随机执行，这取决于JVM虚拟机的实现。</li>\n<li>每个锁对象都有两个队列，一个是就绪队列，一个是阻塞队列。就绪队列存储了将要获得锁的线程，阻塞队列存储了被阻塞的线程。一个线程被唤醒后，才会进入就绪队列，等待CPU的调度；反之，一个线程被wait、sleep、suspend等后，就会进入阻塞队列，等待下一次被唤醒。</li>\n<li><p>线程状态转换示意图如下：</br><img src=\"/images/multithread/线程状态切换.jpg\" alt=\"线程状态切换\"></p>\n<ul>\n<li>新创建一个线程对象后，再调用它的start()方法，系统会为此线程分配CPU资源，使其处于Runnable（可运行）状态，这是一个准备运行的阶段。如果线程抢到CPU资源，就处于Running（运行）状态。</li>\n<li><p>Runnable和Running状态可相互切换，因为有可能线程运行一段时间后，在其他高优先级的线程抢占了CPU资源，这时此线程就从Running状态变成Runnable状态。</p>\n<blockquote>\n<p>线程进入Runnable状态大体分为如下5种情况：</p>\n<ol>\n<li>调用sleep()方法后经过的时间超过了指定的休眠时间；</li>\n<li>线程调用的阻塞IO已经返回，阻塞方法执行完毕；</li>\n<li>线程成功地获得了试图同步的监视器；</li>\n<li>线程正在等待某个通知，其他线程发出了通知；</li>\n<li>处于挂起状态的线程调用了一个resume恢复方法。</li>\n</ol>\n</blockquote>\n</li>\n<li><p>Blocked是阻塞的意思，例如遇到一个阻塞IO操作，此时CPU处于空闲状态，可能会转而把CPU时间片分配给其他线程，这时也可以称为“暂时”状态。Blocked状态结束后，进入Runnabe状态，等待系统重新分配资源。</p>\n<blockquote>\n<p>出现阻塞的情况大体分为以下5种：</p>\n<ol>\n<li>线程调用sleep方法，主动放弃占用的CPU资源；</li>\n<li>线程调用了阻塞式IO方法，在该方法返回前，该线程被阻塞；</li>\n<li>线程试图获得一个同步监视器，但该同步监视器正在被其他线程所持有；</li>\n<li>线程等待某个通知；</li>\n<li>程序调用了suspend方法将该线程挂起。</li>\n</ol>\n</blockquote>\n</li>\n<li><p>run()方法运行结束后进入销毁阶段，整个线程执行完毕。</p>\n</li>\n</ul>\n</li>\n<li><p>wait(long)方法的功能是等待某一时间内是否有线程对锁进行唤醒，如果超过这个时间则自动唤醒。</p>\n</li>\n<li>管道流（pipeStream）用于在不同间直接传送数据。通过使用管道流，不须借助于类似临时文件之类的东西–PipedInputStream和PipedOutputStream、PipedReader和PipedWriter</li>\n<li>inputStream.connect(outputStream)或outputStream.connect(inputStream)使两个Stream之间产生通信链接。</li>\n<li>如果读取线程启动后，没有数据被写入，那么线程会被阻塞在in.read(byteArray)代码中，直到有数据被写入，才会继续运行。</li>\n<li>如果主线程想等待子线程执行完成之后再结束，就要用join()方法。join()方法的作用是等待线程对象销毁。</li>\n<li>join()方法具有使线程排队运行的作用，有些类似同步运行的效果。join与synchronized的区别是：join在内部使用wait()方法进行等待，而synchronized关键字使用的是是“对象监视器”原理做为同步</li>\n<li>主线程A在等待子线程B销毁时（调用了B.join()），如果等待过程中A被打断，A会抛出异常，但异常与B无关，B会继续运行至结束。</li>\n<li>join(time)调用的是wait(time)，所以join(time)会释放线程对象锁，在wait的时间消逝完后，重新竞争对象锁，拿到锁后再又又以把join(time)方法执行完</li>\n<li>ThreadLocal类：每个线程绑定自己的值</li>\n</ul>\n<h1 id=\"第四章-Lock的使用\"><a href=\"#第四章-Lock的使用\" class=\"headerlink\" title=\"第四章 Lock的使用\"></a>第四章 Lock的使用</h1><ul>\n<li>ReentrantReadWriteLock类，读写锁表示有两个锁，一个是读操作相关的锁，也称共享锁；另一个是写操作相关的锁，也叫排他锁。也就是多个读锁之间不互斥，读锁与写锁互斥，写锁与写锁互斥。</li>\n<li>ReentrantReadWriteLock类，“读写”、“写读”和“写写”都是互斥的；而“读读”是异步的，非互斥的。</li>\n</ul>\n<h1 id=\"第六章-单例模式与多线程\"><a href=\"#第六章-单例模式与多线程\" class=\"headerlink\" title=\"第六章  单例模式与多线程\"></a>第六章  单例模式与多线程</h1><ul>\n<li>实例单例模式的方法有：立即加载（饿汉）模式、延迟加载（懒汉）模式、静态内部类模式、静态代码块模式、枚举模式</li>\n<li><p>有效解决延迟加载（懒汉模式）下单例模式的非线程安全问题是使用DCL（double-check locking）双检查机制</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyObject</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> MyObject myObject;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">MyObject</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">// 使用双检测机制来解决问题</span></div><div class=\"line\">   <span class=\"comment\">// 即保证了不需要同步代码的异步</span></div><div class=\"line\">   <span class=\"comment\">// 又保证了单例的效果</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MyObject <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (myObject != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               <span class=\"comment\">// 模拟在创建对象之前做一些准备性的工作</span></div><div class=\"line\">               Thread.sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">               <span class=\"keyword\">synchronized</span> (MyObject.class) &#123;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (myObject == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                       myObject = <span class=\"keyword\">new</span> MyObject();</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">           e.printStackTrace();</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> myObject;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"comment\">// 此版本的代码称为：</span></div><div class=\"line\">   <span class=\"comment\">// 双重检查Double-Check Locking</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在单例反序列化时，解决反序列化得到的对象是一个新对象，而不是原来的实例的问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">readResolve</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ObjectStreamException </span>&#123;</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"调用了readResolve方法！\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> MyObjectHandler.myObject;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"第七章-拾遗增补\"><a href=\"#第七章-拾遗增补\" class=\"headerlink\" title=\"第七章 拾遗增补\"></a>第七章 拾遗增补</h1><ul>\n<li>线程组，一级关联：父对象中有子对象，但并不创建子孙对象。多级关联：父对象中有子对象，子对象中再创建子对象，也就出现子孙对象的效果。</li>\n</ul>"},{"title":"书单--2017","date":"2017-01-01T16:00:00.000Z","_content":"# 重构:改善既有代码的设计\n- 作者：马丁·福勒 (Martin Fowler) (作者), 熊节 (译者)\n- 出版社：人民邮电出版社; 第2版\n- 状态：未开始\n\n# Java并发编程的艺术\n- 作者：方腾飞, 魏鹏, 程晓明\n- 出版社：机械工业出版社; 第1版\n- 状态：未开始\n\n# 数据结构与算法经典问题解析:Java语言描述(原书第2版)\n- 作者：纳拉西姆哈• (作者), 卡鲁曼希(Narasimha Karumanchi) (作者), 骆嘉伟 (译者)\n- 出版社：机械工业出版社; 第1版\n- 状态：未开始\n\n# Java编程思想(第4版)\n- 作者：埃史尔 (作者), 陈昊鹏 (译者)\n- 出版社：机械工业出版社\n- 状态：未开始\n\n# 鸟哥的Linux私房菜:基础学习篇(第3版)\n- 作者：王世江 (改编), 鸟哥 (作者)\n- 出版社：人民邮电出版社; 第3版\n- 状态：未开始\n\n# 鸟哥的Linux私房菜:服务器架设篇(第3版)\n- 作者：鸟哥\n- 出版社：人民邮电出版社; 第3版\n- 状态：未开始\n","source":"_posts/书单--2017.md","raw":"---\ntitle: 书单--2017\ncategory: \"reading notes\"\ndate: 2017/01/02\n---\n# 重构:改善既有代码的设计\n- 作者：马丁·福勒 (Martin Fowler) (作者), 熊节 (译者)\n- 出版社：人民邮电出版社; 第2版\n- 状态：未开始\n\n# Java并发编程的艺术\n- 作者：方腾飞, 魏鹏, 程晓明\n- 出版社：机械工业出版社; 第1版\n- 状态：未开始\n\n# 数据结构与算法经典问题解析:Java语言描述(原书第2版)\n- 作者：纳拉西姆哈• (作者), 卡鲁曼希(Narasimha Karumanchi) (作者), 骆嘉伟 (译者)\n- 出版社：机械工业出版社; 第1版\n- 状态：未开始\n\n# Java编程思想(第4版)\n- 作者：埃史尔 (作者), 陈昊鹏 (译者)\n- 出版社：机械工业出版社\n- 状态：未开始\n\n# 鸟哥的Linux私房菜:基础学习篇(第3版)\n- 作者：王世江 (改编), 鸟哥 (作者)\n- 出版社：人民邮电出版社; 第3版\n- 状态：未开始\n\n# 鸟哥的Linux私房菜:服务器架设篇(第3版)\n- 作者：鸟哥\n- 出版社：人民邮电出版社; 第3版\n- 状态：未开始\n","slug":"书单--2017","published":1,"updated":"2017-02-24T07:34:28.466Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizl2e3460009rcct1ogl27yx","content":"<h1 id=\"重构-改善既有代码的设计\"><a href=\"#重构-改善既有代码的设计\" class=\"headerlink\" title=\"重构:改善既有代码的设计\"></a>重构:改善既有代码的设计</h1><ul>\n<li>作者：马丁·福勒 (Martin Fowler) (作者), 熊节 (译者)</li>\n<li>出版社：人民邮电出版社; 第2版</li>\n<li>状态：未开始</li>\n</ul>\n<h1 id=\"Java并发编程的艺术\"><a href=\"#Java并发编程的艺术\" class=\"headerlink\" title=\"Java并发编程的艺术\"></a>Java并发编程的艺术</h1><ul>\n<li>作者：方腾飞, 魏鹏, 程晓明</li>\n<li>出版社：机械工业出版社; 第1版</li>\n<li>状态：未开始</li>\n</ul>\n<h1 id=\"数据结构与算法经典问题解析-Java语言描述-原书第2版\"><a href=\"#数据结构与算法经典问题解析-Java语言描述-原书第2版\" class=\"headerlink\" title=\"数据结构与算法经典问题解析:Java语言描述(原书第2版)\"></a>数据结构与算法经典问题解析:Java语言描述(原书第2版)</h1><ul>\n<li>作者：纳拉西姆哈• (作者), 卡鲁曼希(Narasimha Karumanchi) (作者), 骆嘉伟 (译者)</li>\n<li>出版社：机械工业出版社; 第1版</li>\n<li>状态：未开始</li>\n</ul>\n<h1 id=\"Java编程思想-第4版\"><a href=\"#Java编程思想-第4版\" class=\"headerlink\" title=\"Java编程思想(第4版)\"></a>Java编程思想(第4版)</h1><ul>\n<li>作者：埃史尔 (作者), 陈昊鹏 (译者)</li>\n<li>出版社：机械工业出版社</li>\n<li>状态：未开始</li>\n</ul>\n<h1 id=\"鸟哥的Linux私房菜-基础学习篇-第3版\"><a href=\"#鸟哥的Linux私房菜-基础学习篇-第3版\" class=\"headerlink\" title=\"鸟哥的Linux私房菜:基础学习篇(第3版)\"></a>鸟哥的Linux私房菜:基础学习篇(第3版)</h1><ul>\n<li>作者：王世江 (改编), 鸟哥 (作者)</li>\n<li>出版社：人民邮电出版社; 第3版</li>\n<li>状态：未开始</li>\n</ul>\n<h1 id=\"鸟哥的Linux私房菜-服务器架设篇-第3版\"><a href=\"#鸟哥的Linux私房菜-服务器架设篇-第3版\" class=\"headerlink\" title=\"鸟哥的Linux私房菜:服务器架设篇(第3版)\"></a>鸟哥的Linux私房菜:服务器架设篇(第3版)</h1><ul>\n<li>作者：鸟哥</li>\n<li>出版社：人民邮电出版社; 第3版</li>\n<li>状态：未开始</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"重构-改善既有代码的设计\"><a href=\"#重构-改善既有代码的设计\" class=\"headerlink\" title=\"重构:改善既有代码的设计\"></a>重构:改善既有代码的设计</h1><ul>\n<li>作者：马丁·福勒 (Martin Fowler) (作者), 熊节 (译者)</li>\n<li>出版社：人民邮电出版社; 第2版</li>\n<li>状态：未开始</li>\n</ul>\n<h1 id=\"Java并发编程的艺术\"><a href=\"#Java并发编程的艺术\" class=\"headerlink\" title=\"Java并发编程的艺术\"></a>Java并发编程的艺术</h1><ul>\n<li>作者：方腾飞, 魏鹏, 程晓明</li>\n<li>出版社：机械工业出版社; 第1版</li>\n<li>状态：未开始</li>\n</ul>\n<h1 id=\"数据结构与算法经典问题解析-Java语言描述-原书第2版\"><a href=\"#数据结构与算法经典问题解析-Java语言描述-原书第2版\" class=\"headerlink\" title=\"数据结构与算法经典问题解析:Java语言描述(原书第2版)\"></a>数据结构与算法经典问题解析:Java语言描述(原书第2版)</h1><ul>\n<li>作者：纳拉西姆哈• (作者), 卡鲁曼希(Narasimha Karumanchi) (作者), 骆嘉伟 (译者)</li>\n<li>出版社：机械工业出版社; 第1版</li>\n<li>状态：未开始</li>\n</ul>\n<h1 id=\"Java编程思想-第4版\"><a href=\"#Java编程思想-第4版\" class=\"headerlink\" title=\"Java编程思想(第4版)\"></a>Java编程思想(第4版)</h1><ul>\n<li>作者：埃史尔 (作者), 陈昊鹏 (译者)</li>\n<li>出版社：机械工业出版社</li>\n<li>状态：未开始</li>\n</ul>\n<h1 id=\"鸟哥的Linux私房菜-基础学习篇-第3版\"><a href=\"#鸟哥的Linux私房菜-基础学习篇-第3版\" class=\"headerlink\" title=\"鸟哥的Linux私房菜:基础学习篇(第3版)\"></a>鸟哥的Linux私房菜:基础学习篇(第3版)</h1><ul>\n<li>作者：王世江 (改编), 鸟哥 (作者)</li>\n<li>出版社：人民邮电出版社; 第3版</li>\n<li>状态：未开始</li>\n</ul>\n<h1 id=\"鸟哥的Linux私房菜-服务器架设篇-第3版\"><a href=\"#鸟哥的Linux私房菜-服务器架设篇-第3版\" class=\"headerlink\" title=\"鸟哥的Linux私房菜:服务器架设篇(第3版)\"></a>鸟哥的Linux私房菜:服务器架设篇(第3版)</h1><ul>\n<li>作者：鸟哥</li>\n<li>出版社：人民邮电出版社; 第3版</li>\n<li>状态：未开始</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cizl2e33m0000rcctgegg7c3b","category_id":"cizl2e33r0002rcct4roin2ei","_id":"cizl2e3450008rcct134ye0yt"},{"post_id":"cizl2e3430007rcctxxkpo7n4","category_id":"cizl2e3420006rcctpa4x1hoy","_id":"cizl2e34b000brcctcvgbhrke"},{"post_id":"cizl2e33p0001rcct8llgfgbj","category_id":"cizl2e3420006rcctpa4x1hoy","_id":"cizl2e34b000drcctxz8wt8ys"},{"post_id":"cizl2e3460009rcct1ogl27yx","category_id":"cizl2e3420006rcctpa4x1hoy","_id":"cizl2e34c000ercctko5ls2zs"},{"post_id":"cizl2e33u0003rcct5q2yfukn","category_id":"cizl2e349000arcct1pw279uh","_id":"cizl2e34c000frcctnkshvu2d"},{"post_id":"cizl2e33v0004rcctgnigvrrx","category_id":"cizl2e34b000crcctns3cj9su","_id":"cizl2e34d000hrcct37berzde"},{"post_id":"cizl2e3410005rcctqf6rk3a6","category_id":"cizl2e3420006rcctpa4x1hoy","_id":"cizl2e34e000ircctky5i0b6q"}],"PostTag":[],"Tag":[]}}